unit Bryntum.Grid;

interface

{$modeswitch externalclass}

uses JS, Web, SysUtils;

type
  TCSSRule = TJSCSSRule;
  TElement = TJSElement;
  TEvent = TJSEvent;
  TFileList = TJSHTMLFileList;
  TFunction = TProc;
  THTMLElement = TJSHTMLElement;
  TMap<T1,T2> = class(TJSMap)
  end;
  TProxyClass = class of TJSObject;
  TResponse = TJSResponse;
  // Must be the TJSShadowRoot element, not exists in Pas2Js
  TShadowRoot = TJSObject;

  TDomConfig = class;
  TPanelHeader = class;
  TBreakpoint = class;
  TWidgetTagConfig = class;
  TAjaxStoreConfig = class;
  TModelConfig = class;
  TStoreConfig = class;
  TDataFieldConfig = class;
  TBooleanDataFieldConfig = class;
  TDateDataFieldConfig = class;
  TIntegerDataFieldConfig = class;
  TNumberDataFieldConfig = class;
  TStringDataFieldConfig = class;
  TStoreCRUDConfig = class;
  TStoreChainedConfig = class;
  TStoreFilterConfig = class;
  TStoreGroupConfig = class;
  TStoreProxyConfig = class;
  TStoreSortConfig = class;
  TStoreSyncConfig = class;
  TStoreTreeConfig = class;
  TTreeNodeConfig = class;
  TStateTrackingManagerConfig = class;
  TTransactionConfig = class;
  TStoreStmConfig = class;
  TInstancePluginConfig = class;
  TContextMenuBaseConfig = class;
  TDragHelperConfig = class;
  TNumberFormatConfig = class;
  TScrollerConfig = class;
  TLocalizableConfig = class;
  TEventsConfig = class;
  TLoadMaskableConfig = class;
  TPluggableConfig = class;
  TClickRepeaterConfig = class;
  TCollectionConfig = class;
  TCollectionFilterConfig = class;
  TCollectionSorterConfig = class;
  TMonthConfig = class;
  TScrollManagerConfig = class;
  TButtonConfig = class;
  TWidgetConfig = class;
  TButtonGroupConfig = class;
  TCalendarPanelConfig = class;
  TCheckboxConfig = class;
  TChipViewConfig = class;
  TComboConfig = class;
  TContainerConfig = class;
  TDateFieldConfig = class;
  TDatePickerConfig = class;
  TDateTimeFieldConfig = class;
  TDisplayFieldConfig = class;
  TDurationFieldConfig = class;
  TEditorConfig = class;
  TFieldConfig = class;
  TFileFieldConfig = class;
  TFilePickerConfig = class;
  TFilterFieldConfig = class;
  TListConfig = class;
  TMaskConfig = class;
  TMenuConfig = class;
  TMenuItemConfig = class;
  TNumberFieldConfig = class;
  TPagingToolbarConfig = class;
  TPanelConfig = class;
  TPickerFieldConfig = class;
  TPopupConfig = class;
  TSlideToggleConfig = class;
  TSliderConfig = class;
  TSplitterConfig = class;
  TTabConfig = class;
  TTabBarConfig = class;
  TTabPanelConfig = class;
  TTextAreaFieldConfig = class;
  TTextFieldConfig = class;
  TTimeFieldConfig = class;
  TToastConfig = class;
  TToolConfig = class;
  TToolbarConfig = class;
  TTooltipConfig = class;
  TUndoRedoBaseConfig = class;
  THistogramConfig = class;
  TScaleConfig = class;
  TLayoutConfig = class;
  TBadgeConfig = class;
  TResponsiveConfig = class;
  TStyleableConfig = class;
  TActionColumnConfig = class;
  TAggregateColumnConfig = class;
  TCheckColumnConfig = class;
  TColumnConfig = class;
  TDateColumnConfig = class;
  TNumberColumnConfig = class;
  TPercentColumnConfig = class;
  TRatingColumnConfig = class;
  TRowNumberColumnConfig = class;
  TTemplateColumnConfig = class;
  TTimeColumnConfig = class;
  TTreeColumnConfig = class;
  TWidgetColumnConfig = class;
  TGridTagConfig = class;
  TColumnStoreConfig = class;
  TGridRowModelConfig = class;
  TCellEditConfig = class;
  TCellMenuConfig = class;
  TCellTooltipConfig = class;
  TColumnAutoWidthConfig = class;
  TColumnDragToolbarConfig = class;
  TColumnPickerConfig = class;
  TColumnReorderConfig = class;
  TColumnResizeConfig = class;
  TContextMenuConfig = class;
  TFilterConfig = class;
  TFilterBarConfig = class;
  TGroupConfig = class;
  TGroupSummaryConfig = class;
  THeaderMenuConfig = class;
  TQuickFindConfig = class;
  TRegionResizeConfig = class;
  TRowCopyPasteConfig = class;
  TRowReorderConfig = class;
  TSearchConfig = class;
  TSortConfig = class;
  TStickyCellsConfig = class;
  TStripeConfig = class;
  TSummaryConfig = class;
  TTreeConfig = class;
  TExcelExporterConfig = class;
  TPdfExportConfig = class;
  TExporterConfig = class;
  TRowConfig = class;
  TTableExporterConfig = class;
  TGridConfig = class;
  TGridBaseConfig = class;
  TSubGridConfig = class;
  TTreeGridConfig = class;
  TExportDialogConfig = class;
  TGridElementEventsConfig = class;
  TGridFeaturesConfig = class;
  TGridResponsiveConfig = class;
  TGridSelectionConfig = class;

  TBryntum = class external name 'bryntum.grid'
  public type
    TBase = class;
    TGlobalEventsSingleton = class;
    TWidgetTag = class;
    TStore = class;
    TAjaxStore = class;
    TDuration = class;
    TModel = class;
    TDataField = class;
    TBooleanDataField = class;
    TDateDataField = class;
    TIntegerDataField = class;
    TNumberDataField = class;
    TStringDataField = class;
    TStoreCRUD = class;
    TStoreChained = class;
    TStoreFilter = class;
    TStoreGroup = class;
    TStoreProxy = class;
    TStoreSearch = class;
    TStoreSort = class;
    TStoreState = class;
    TStoreSum = class;
    TStoreSync = class;
    TStoreTree = class;
    TTreeNode = class;
    TStateTrackingManager = class;
    TTransaction = class;
    TActionBase = class;
    TModelStm = class;
    TStoreStm = class;
    TStateBase = class;
    TInstancePlugin = class;
    TContextMenuBase = class;
    TAjaxHelper = class;
    TAsyncHelper = class;
    TBrowserHelper = class;
    TCSSHelper = class;
    TDateHelper = class;
    TDomHelper = class;
    TDomSync = class;
    TDragHelper = class;
    TEventHelper = class;
    TObjectHelper = class;
    TStringHelper = class;
    TWidgetHelper = class;
    TXMLHelper = class;
    TDataGenerator = class;
    TDomClassList = class;
    TFullscreen = class;
    TNumberFormat = class;
    TRectangle = class;
    TPoint = class;
    TRandomGenerator = class;
    TScroller = class;
    TLocaleHelper = class;
    TLocaleManagerSingleton = class;
    TLocalizable = class;
    TDelayable = class;
    TEvents = class;
    TLoadMaskable = class;
    TOverride = class;
    TPluggable = class;
    TState = class;
    TClickRepeater = class;
    TCollection = class;
    TCollectionFilter = class;
    TCollectionSorter = class;
    TMonth = class;
    TScrollManager = class;
    TWidget = class;
    TButton = class;
    TContainer = class;
    TButtonGroup = class;
    TPanel = class;
    TCalendarPanel = class;
    TField = class;
    TCheckbox = class;
    TList = class;
    TChipView = class;
    TTextField = class;
    TPickerField = class;
    TCombo = class;
    TDateField = class;
    TDatePicker = class;
    TDateTimeField = class;
    TDisplayField = class;
    TDurationField = class;
    TEditor = class;
    TFileField = class;
    TFilePicker = class;
    TFilterField = class;
    TMask = class;
    TMenu = class;
    TMenuItem = class;
    TMessageDialogSingleton = class;
    TNumberField = class;
    TPagingToolbar = class;
    TPopup = class;
    TSlideToggle = class;
    TSlider = class;
    TSplitter = class;
    TTab = class;
    TTabBar = class;
    TTabPanel = class;
    TTextAreaField = class;
    TTimeField = class;
    TToast = class;
    TTool = class;
    TToolbar = class;
    TTooltip = class;
    TUndoRedoBase = class;
    THistogram = class;
    TScale = class;
    TLayout = class;
    TBadge = class;
    TResponsive = class;
    TStyleable = class;
    TActionColumn = class;
    TAggregateColumn = class;
    TCheckColumn = class;
    TColumn = class;
    TDateColumn = class;
    TNumberColumn = class;
    TPercentColumn = class;
    TRatingColumn = class;
    TRowNumberColumn = class;
    TTemplateColumn = class;
    TTimeColumn = class;
    TTreeColumn = class;
    TWidgetColumn = class;
    TGridTag = class;
    TColumnStore = class;
    TGridRowModel = class;
    TCellEdit = class;
    TCellMenu = class;
    TCellTooltip = class;
    TColumnAutoWidth = class;
    TColumnDragToolbar = class;
    TColumnPicker = class;
    TColumnReorder = class;
    TColumnResize = class;
    TContextMenu = class;
    TFilter = class;
    TFilterBar = class;
    TGridFeatureManager = class;
    TGroup = class;
    TGroupSummary = class;
    THeaderMenu = class;
    TQuickFind = class;
    TRegionResize = class;
    TRowCopyPaste = class;
    TRowReorder = class;
    TSearch = class;
    TSort = class;
    TStickyCells = class;
    TStripe = class;
    TSummary = class;
    TTree = class;
    TExcelExporter = class;
    TPdfExport = class;
    TExporter = class;
    TRow = class;
    TTableExporter = class;
    TGrid = class;
    TGridBase = class;
    TSubGrid = class;
    TTreeGrid = class;
    TExportDialog = class;
    TGridElementEvents = class;
    TGridFeatures = class;
    TGridResponsive = class;
    TGridSelection = class;
    TGridState = class;
    TGridSubGrids = class;

    TLocaleManagerClass = TLocaleManagerSingleton;
    TModelClass = class of TModel;

    TBase = class external name 'Base'
      config: TJSObject;
      isDestroyed: Boolean;
      isDestroying: Boolean;
      constructor new(args: TJSObject);
      class procedure initClass;
      class function isOfTypeName(&type: String): Boolean;
      class function mixin(mixins: TFunction): TFunction;
      procedure callback(fn: JSValue {String or TFunction}; thisObject: TJSObject; args: array of TJSObject);
      procedure construct; overload;
      procedure construct(args: TJSObject); overload;
      procedure destroy;
      procedure detachListeners(name: String);
      procedure doDestroy;
      function resolveCallback(handler: JSValue {String or TFunction}; thisObj: TJSObject): TJSObject; overload;
      function resolveCallback(handler: JSValue {String or TFunction}; thisObj: TJSObject; enforceCallability: Boolean): TJSObject; overload;
      procedure setConfig(config: TJSObject);
    end;

    TGlobalEventsSingleton = class external name 'GlobalEventsSingleton'
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onTheme: TFunction;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
    end;

    TWidgetTag = class external name 'WidgetTag'
      widget: TWidget;
      constructor new(config: TWidgetTagConfig);
      procedure destroy;
    end;

    TStore = class external name 'Store'(TBase)
    public
      class var stores: array of TStore;
    public
      allCount: Double;
      allRecords: array of TModel;
      autoCommit: Boolean;
      changes: TJSObject;
      count: Double;
      data: array of TJSObject;
      filters: TCollection;
      first: TModel;
      formattedJSON: String;
      groupers: array of TJSObject;
      isChained: Boolean;
      isFiltered: Boolean;
      isGrouped: Boolean;
      isSorted: Boolean;
      isTree: Boolean;
      json: String;
      last: TModel;
      leaves: array of TModel;
      modelClass: TModelClass;
      originalCount: Double;
      records: array of TModel;
      rootNode: TModel;
      sorters: array of TJSObject;
      onAdd: TFunction;
      onAddConfirmed: TFunction;
      onBeforeAdd: TFunction;
      onBeforeCommit: TFunction;
      onBeforeDestroy: TFunction;
      onBeforeRemove: TFunction;
      onBeforeSort: TFunction;
      onBeforeUpdate: TFunction;
      onCatchAll: TFunction;
      onChange: TFunction;
      onCommit: TFunction;
      onDestroy: TFunction;
      onFilter: TFunction;
      onGroup: TFunction;
      onIdChange: TFunction;
      onMove: TFunction;
      onRefresh: TFunction;
      onRemove: TFunction;
      onRemoveAll: TFunction;
      onRootChange: TFunction;
      onSort: TFunction;
      onUpdate: TFunction;
      constructor new(config: TStoreConfig);
      class function getStore(id: JSValue {String or Double or array of TJSObject}): TStore;
      function add(records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}): array of TModel; overload;
      function add(records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}; silent: Boolean): array of TModel; overload;
      function addFilter(newFilters: JSValue {TJSObject or TFunction}): TCollectionFilter; overload;
      function addFilter(newFilters: JSValue {TJSObject or TFunction}; silent: Boolean): TCollectionFilter; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure addSorter(field: JSValue {String or array of JSValue or TJSObject or TFunction}); overload;
      procedure addSorter(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean); overload;
      procedure applyChangesFromStore(otherStore: TStore);
      function average(field: String; records: array of TModel): Double;
      procedure beginBatch;
      function chain(chainedFilterFn: TFunction; chainedFields: array of String; config: TJSObject): TStore;
      procedure clearFilters;
      procedure clearGroupers;
      procedure clearSorters;
      function commit: TJSObject; overload;
      function commit(silent: Boolean): TJSObject; overload;
      procedure createRecord(data: TJSObject); overload;
      procedure createRecord(data: TJSObject; skipExpose: Boolean); overload;
      function createSorterFn(sorters: array of TJSObject): TFunction;
      procedure endBatch;
      procedure fillFromMaster;
      procedure filter(newFilters: JSValue {TJSObject or array of TJSObject or TFunction});
      procedure filterBy(fn: TFunction);
      function find(fn: TFunction): TModel; overload;
      function find(fn: TFunction; searchAllRecords: Boolean): TModel; overload;
      function findByField(field: String; value: JSValue): JSValue;
      function findRecord(fieldName: String; value: JSValue): TModel; overload;
      function findRecord(fieldName: String; value: JSValue; searchAllRecords: Boolean): TModel; overload;
      procedure forEach(fn: TFunction); overload;
      procedure forEach(fn: TFunction; thisObj: TJSObject); overload;
      procedure forEach(fn: TFunction; thisObj: TJSObject; options: JSValue {TJSObject or Boolean}); overload;
      function getAt(index: Double): TModel;
      function getById(id: JSValue {TModel or String or Double}): TModel;
      function getByInternalId(internalId: Double): TModel;
      function getChildren(parent: TModel): array of TModel;
      function getCount: Double; overload;
      function getCount(countProcessed: Boolean): Double; overload;
      function getDistinctValues(field: String): array of JSValue;
      function getGroupRecords(groupValue: JSValue): array of TModel;
      function getGroupTitles: array of String;
      function getNext(recordOrId: JSValue {TModel or String or Double}): TModel; overload;
      function getNext(recordOrId: JSValue {TModel or String or Double}; wrap: Boolean): TModel; overload;
      function getNext(recordOrId: JSValue {TModel or String or Double}; wrap: Boolean; skipSpecialRows: Boolean): TModel; overload;
      function getPrev(recordOrId: JSValue {TModel or String or Double}): TModel; overload;
      function getPrev(recordOrId: JSValue {TModel or String or Double}; wrap: Boolean): TModel; overload;
      function getPrev(recordOrId: JSValue {TModel or String or Double}; wrap: Boolean; skipSpecialRows: Boolean): TModel; overload;
      function getRange: array of TModel; overload;
      function getRange(start: Double): array of TModel; overload;
      function getRange(start: Double; &end: Double): array of TModel; overload;
      function getValueCount(field: String; value: JSValue): Double;
      procedure group(field: JSValue {String or TJSObject}); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean; performSort: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean; performSort: Boolean; silent: Boolean); overload;
      function groupSum(groupValue: JSValue; field: String): Double;
      function hasListener(eventName: String): Boolean;
      function includes(recordOrId: JSValue {TModel or String or Double}): Boolean;
      function indexOf(recordOrId: JSValue {TModel or String or Double}): Double; overload;
      function indexOf(recordOrId: JSValue {TModel or String or Double}; visibleRecords: Boolean): Double; overload;
      function insert(index: Double; records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}): array of TModel; overload;
      function insert(index: Double; records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}; silent: Boolean): array of TModel; overload;
      function isAvailable(recordOrId: JSValue {TModel or String or Double}): Boolean;
      function isRecordInGroup(&record: TModel; groupValue: JSValue): Boolean;
      function loadChildren(parentRecord: TModel): JSValue; async;
      function makeChained(chainedFilterFn: TFunction; chainedFields: array of String; config: TJSObject): TStore;
      function map(fn: TFunction): array of JSValue;
      function max(field: String; records: array of TModel): JSValue {Double or TDate};
      function min(field: String; records: array of TModel): JSValue {Double or TDate};
      procedure move(records: JSValue {TModel or array of TModel}; beforeRecord: TModel);
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure onDataChange(event: TJSObject);
      function query(fn: TFunction): array of TModel; overload;
      function query(fn: TFunction; searchAllRecords: Boolean): array of TModel; overload;
      function reduce(fn: TFunction; initialValue: JSValue): JSValue;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      function remove(records: JSValue {String or array of String or Double or array of Double or TModel or array of TModel}): array of TModel; overload;
      function remove(records: JSValue {String or array of String or Double or array of Double or TModel or array of TModel}; silent: Boolean): array of TModel; overload;
      function removeAll: Boolean; overload;
      function removeAll(silent: Boolean): Boolean; overload;
      procedure removeAllListeners;
      function removeFilter(idOrInstance: JSValue {String or TCollectionFilter}): TCollectionFilter; overload;
      function removeFilter(idOrInstance: JSValue {String or TCollectionFilter}; silent: Boolean): TCollectionFilter; overload;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure removeSorter(field: JSValue {String or TFunction});
      procedure resumeAutoCommit;
      procedure resumeEvents;
      procedure revertChanges;
      function search(find: String; fields: array of TJSObject): array of TJSObject;
      function some(fn: TFunction): Boolean; overload;
      function some(fn: TFunction; searchAllRecords: Boolean): Boolean; overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean; add: Boolean); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean; add: Boolean; silent: Boolean); overload;
      function sum(field: String; records: array of TModel): Double;
      procedure suspendAutoCommit;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function toJSON: array of TJSObject;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean): JSValue; overload; async;
      procedure traverse(fn: TFunction); overload;
      procedure traverse(fn: TFunction; topNode: TModel); overload;
      procedure traverse(fn: TFunction; topNode: TModel; skipTopNode: Boolean); overload;
      procedure traverse(fn: TFunction; topNode: TModel; skipTopNode: Boolean; options: JSValue {TJSObject or Boolean}); overload;
      procedure traverseWhile(fn: TFunction); overload;
      procedure traverseWhile(fn: TFunction; topNode: TModel); overload;
      procedure traverseWhile(fn: TFunction; topNode: TModel; skipTopNode: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
    end;

    TAjaxStore = class external name 'AjaxStore'(TStore)
      allCount: Double;
      isCommitting: Boolean;
      isLoading: Boolean;
      isPaged: Boolean;
      lastPage: Double;
      params: TJSObject;
      onAfterRequest: TFunction;
      onBeforeLoad: TFunction;
      onBeforeLoadChildren: TFunction;
      onBeforeLoadPage: TFunction;
      onBeforeRequest: TFunction;
      onCommitAdded: TFunction;
      onCommitModified: TFunction;
      onCommitRemoved: TFunction;
      onException: TFunction;
      onLoad: TFunction;
      onLoadChildren: TFunction;
      onLoadChildrenStart: TFunction;
      onLoadStart: TFunction;
      constructor new(config: TAjaxStoreConfig);
      function commit: JSValue; async;
      procedure encodeFilterParams(filters: array of TCollectionFilter);
      procedure encodeSorterParams(sorters: array of TJSObject);
      function load: JSValue; overload; async;
      function load(params: TJSObject): JSValue; overload; async;
      function loadChildren(parentRecord: TModel): JSValue; async;
      function loadPage(page: Double; params: TJSObject): JSValue; async;
      function nextPage: JSValue; async;
      function previousPage: JSValue; async;
    end;

    TDuration = class external name 'Duration'
      magnitude: Double;
      milliseconds: Double;
      &unit: String;
      function isEqual(value: TDuration): Boolean;
    end;

    TModel = class external name 'Model'
    public
      class var autoExposeFields: Boolean;
      class var childrenField: String;
      class var convertEmptyParentToLeaf: JSValue {Boolean or TJSObject};
      class var defaults: TJSObject;
      class var idField: String;
    public
      allChildren: array of TModel;
      allFields: array of TDataField;
      childLevel: Double;
      children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
      descendantCount: Double;
      fieldMap: TJSObject;
      fieldNames: array of String;
      fields: array of TDataField;
      firstChild: TModel;
      firstStore: TStore;
      hasGeneratedId: Boolean;
      id: JSValue {String or Double};
      internalId: Double;
      isBatchUpdating: Boolean;
      isCommitting: Boolean;
      isCreating: Boolean;
      isLeaf: Boolean;
      isLoaded: Boolean;
      isModified: Boolean;
      isParent: Boolean;
      isPersistable: Boolean;
      isPhantom: Boolean;
      isValid: Boolean;
      json: String;
      lastChild: TModel;
      modificationData: TJSObject;
      modifications: TJSObject;
      parent: TModel;
      parentId: JSValue {Double or String or };
      parentIndex: Double;
      previousSiblingsTotalCount: Double;
      stm: TStateTrackingManager;
      visibleDescendantCount: Double;
      constructor new(data: TJSObject; store: TStore; meta: TJSObject);
      class procedure addField(fieldDef: JSValue {String or TJSObject});
      class function asId(model: JSValue {TModel or String or Double}): JSValue {String or Double};
      class function getFieldDefinition(fieldName: String): TDataField;
      class function processField(fieldName: String; value: JSValue): JSValue;
      class procedure removeField(fieldName: String);
      function ancestorsExpanded: Boolean; overload;
      function ancestorsExpanded(store: TStore): Boolean; overload;
      function appendChild(childRecord: JSValue {TModel or array of TModel}): JSValue {TModel or array of TModel}; overload;
      function appendChild(childRecord: JSValue {TModel or array of TModel}; silent: Boolean): JSValue {TModel or array of TModel}; overload;
      procedure beginBatch;
      procedure bubble(fn: TFunction); overload;
      procedure bubble(fn: TFunction; skipSelf: Boolean); overload;
      function bubbleWhile(fn: TFunction): Boolean; overload;
      function bubbleWhile(fn: TFunction; skipSelf: Boolean): Boolean; overload;
      procedure cancelBatch;
      procedure clearChanges;
      function contains(childOrId: JSValue {TModel or String or Double}): Boolean;
      function copy: TModel; overload;
      function copy(newId: JSValue {Double or String or TJSObject}): TModel; overload;
      function copy(newId: JSValue {Double or String or TJSObject}; deep: Boolean): TModel; overload;
      procedure endBatch; overload;
      procedure endBatch(silent: Boolean); overload;
      function equals(other: TModel): Boolean;
      procedure generateId;
      function get(fieldName: String): JSValue;
      function getData(fieldName: String): JSValue;
      function getDataSource(fieldName: String): String;
      function getDescendantCount: Double; overload;
      function getDescendantCount(onlyVisible: Boolean): Double; overload;
      function getDescendantCount(onlyVisible: Boolean; store: TStore): Double; overload;
      function hasBatchedChange(fieldName: String): Boolean;
      function insertChild(childRecord: JSValue {TModel or array of TModel}): JSValue {TModel or array of TModel}; overload;
      function insertChild(childRecord: JSValue {TModel or array of TModel}; before: TModel): JSValue {TModel or array of TModel}; overload;
      function insertChild(childRecord: JSValue {TModel or array of TModel}; before: TModel; silent: Boolean): JSValue {TModel or array of TModel}; overload;
      function isExpanded(store: TStore): Boolean;
      function isFieldModified(fieldName: String): Boolean;
      procedure remove; overload;
      procedure remove(silent: Boolean); overload;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}); overload;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}; isMove: Boolean); overload;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}; isMove: Boolean; silent: Boolean); overload;
      procedure revertChanges;
      procedure &set(field: JSValue {String or TJSObject}; value: JSValue); overload;
      procedure &set(field: JSValue {String or TJSObject}; value: JSValue; silent: Boolean); overload;
      function toJSON: TJSObject;
      function toString: String;
      procedure traverse(fn: TFunction); overload;
      procedure traverse(fn: TFunction; skipSelf: Boolean); overload;
      procedure traverse(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean); overload;
      procedure traverseBefore(fn: TFunction); overload;
      procedure traverseBefore(fn: TFunction; skipSelf: Boolean); overload;
      procedure traverseBefore(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean); overload;
      function traverseWhile(fn: TFunction): Boolean; overload;
      function traverseWhile(fn: TFunction; skipSelf: Boolean): Boolean; overload;
      function traverseWhile(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean): Boolean; overload;
    end;

    TDataField = class external name 'DataField'(TBase)
      constructor new(config: TDataFieldConfig);
      function convert(value: JSValue): JSValue;
      function isEqual(first: JSValue; second: JSValue): Boolean;
      function print(value: JSValue): String;
      function printValue(value: JSValue): String;
      function serialize(value: JSValue; &record: TModel): JSValue;
    end;

    TBooleanDataField = class external name 'BooleanDataField'(TDataField)
      constructor new(config: TBooleanDataFieldConfig);
    end;

    TDateDataField = class external name 'DateDataField'(TDataField)
      constructor new(config: TDateDataFieldConfig);
    end;

    TIntegerDataField = class external name 'IntegerDataField'(TDataField)
      constructor new(config: TIntegerDataFieldConfig);
    end;

    TNumberDataField = class external name 'NumberDataField'(TDataField)
      constructor new(config: TNumberDataFieldConfig);
    end;

    TStringDataField = class external name 'StringDataField'(TDataField)
      constructor new(config: TStringDataFieldConfig);
    end;

    TStoreCRUD = class external name 'StoreCRUD'
      autoCommit: Boolean;
      changes: TJSObject;
      onAdd: TFunction;
      onBeforeAdd: TFunction;
      onBeforeCommit: TFunction;
      onBeforeRemove: TFunction;
      onCommit: TFunction;
      onRemove: TFunction;
      onRemoveAll: TFunction;
      constructor new(config: TStoreCRUDConfig);
      function add(records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}): array of TModel; overload;
      function add(records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}; silent: Boolean): array of TModel; overload;
      procedure applyChangesFromStore(otherStore: TStore);
      function commit: TJSObject; overload;
      function commit(silent: Boolean): TJSObject; overload;
      function insert(index: Double; records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}): array of TModel; overload;
      function insert(index: Double; records: JSValue {TModel or array of TModel or TJSObject or array of TJSObject or TModelConfig or array of TModelConfig}; silent: Boolean): array of TModel; overload;
      procedure move(records: JSValue {TModel or array of TModel}; beforeRecord: TModel);
      function remove(records: JSValue {String or array of String or Double or array of Double or TModel or array of TModel}): array of TModel; overload;
      function remove(records: JSValue {String or array of String or Double or array of Double or TModel or array of TModel}; silent: Boolean): array of TModel; overload;
      function removeAll: Boolean; overload;
      function removeAll(silent: Boolean): Boolean; overload;
      procedure resumeAutoCommit;
      procedure revertChanges;
      procedure suspendAutoCommit;
    end;

    TStoreChained = class external name 'StoreChained'
      isChained: Boolean;
      constructor new(config: TStoreChainedConfig);
      function chain(chainedFilterFn: TFunction; chainedFields: array of String; config: TJSObject): TStore;
      procedure fillFromMaster;
      function makeChained(chainedFilterFn: TFunction; chainedFields: array of String; config: TJSObject): TStore;
    end;

    TStoreFilter = class external name 'StoreFilter'
      filters: TCollection;
      isFiltered: Boolean;
      onFilter: TFunction;
      constructor new(config: TStoreFilterConfig);
      function addFilter(newFilters: JSValue {TJSObject or TFunction}): TCollectionFilter; overload;
      function addFilter(newFilters: JSValue {TJSObject or TFunction}; silent: Boolean): TCollectionFilter; overload;
      procedure clearFilters;
      procedure filter(newFilters: JSValue {TJSObject or array of TJSObject or TFunction});
      procedure filterBy(fn: TFunction);
      function removeFilter(idOrInstance: JSValue {String or TCollectionFilter}): TCollectionFilter; overload;
      function removeFilter(idOrInstance: JSValue {String or TCollectionFilter}; silent: Boolean): TCollectionFilter; overload;
    end;

    TStoreGroup = class external name 'StoreGroup'
      groupers: array of TJSObject;
      isGrouped: Boolean;
      onGroup: TFunction;
      constructor new(config: TStoreGroupConfig);
      procedure clearGroupers;
      function getGroupRecords(groupValue: JSValue): array of TModel;
      function getGroupTitles: array of String;
      procedure group(field: JSValue {String or TJSObject}); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean; performSort: Boolean); overload;
      procedure group(field: JSValue {String or TJSObject}; ascending: Boolean; add: Boolean; performSort: Boolean; silent: Boolean); overload;
      function isRecordInGroup(&record: TModel; groupValue: JSValue): Boolean;
    end;

    TStoreProxy = class external name 'StoreProxy'
      constructor new(config: TStoreProxyConfig);
    end;

    TStoreSearch = class external name 'StoreSearch'
      function find(fn: TFunction): TModel; overload;
      function find(fn: TFunction; searchAllRecords: Boolean): TModel; overload;
      function findByField(field: String; value: JSValue): JSValue;
      function findRecord(fieldName: String; value: JSValue): TModel; overload;
      function findRecord(fieldName: String; value: JSValue; searchAllRecords: Boolean): TModel; overload;
      function query(fn: TFunction): array of TModel; overload;
      function query(fn: TFunction; searchAllRecords: Boolean): array of TModel; overload;
      function search(find: String; fields: array of TJSObject): array of TJSObject;
      function some(fn: TFunction): Boolean; overload;
      function some(fn: TFunction; searchAllRecords: Boolean): Boolean; overload;
    end;

    TStoreSort = class external name 'StoreSort'
      isSorted: Boolean;
      sorters: array of TJSObject;
      onBeforeSort: TFunction;
      onSort: TFunction;
      constructor new(config: TStoreSortConfig);
      procedure addSorter(field: JSValue {String or array of JSValue or TJSObject or TFunction}); overload;
      procedure addSorter(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean); overload;
      procedure clearSorters;
      function createSorterFn(sorters: array of TJSObject): TFunction;
      procedure removeSorter(field: JSValue {String or TFunction});
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean; add: Boolean); overload;
      procedure sort(field: JSValue {String or array of JSValue or TJSObject or TFunction}; ascending: Boolean; add: Boolean; silent: Boolean); overload;
    end;

    TStoreState = class external name 'StoreState'
    end;

    TStoreSum = class external name 'StoreSum'
      function average(field: String; records: array of TModel): Double;
      function groupSum(groupValue: JSValue; field: String): Double;
      function max(field: String; records: array of TModel): JSValue {Double or TDate};
      function min(field: String; records: array of TModel): JSValue {Double or TDate};
      function sum(field: String; records: array of TModel): Double;
    end;

    TStoreSync = class external name 'StoreSync'
      constructor new(config: TStoreSyncConfig);
    end;

    TStoreTree = class external name 'StoreTree'
      isTree: Boolean;
      leaves: array of TModel;
      constructor new(config: TStoreTreeConfig);
      function getChildren(parent: TModel): array of TModel;
      function loadChildren(parentRecord: TModel): JSValue; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean): JSValue; overload; async;
    end;

    TTreeNode = class external name 'TreeNode'
    public
      class var convertEmptyParentToLeaf: JSValue {Boolean or TJSObject};
    public
      allChildren: array of TModel;
      childLevel: Double;
      children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
      descendantCount: Double;
      firstChild: TModel;
      isLeaf: Boolean;
      isLoaded: Boolean;
      isParent: Boolean;
      lastChild: TModel;
      parent: TModel;
      parentId: JSValue {Double or String or };
      parentIndex: Double;
      previousSiblingsTotalCount: Double;
      visibleDescendantCount: Double;
      constructor new(config: TTreeNodeConfig);
      function ancestorsExpanded: Boolean; overload;
      function ancestorsExpanded(store: TStore): Boolean; overload;
      function appendChild(childRecord: JSValue {TModel or array of TModel}): JSValue {TModel or array of TModel}; overload;
      function appendChild(childRecord: JSValue {TModel or array of TModel}; silent: Boolean): JSValue {TModel or array of TModel}; overload;
      procedure bubble(fn: TFunction); overload;
      procedure bubble(fn: TFunction; skipSelf: Boolean); overload;
      function bubbleWhile(fn: TFunction): Boolean; overload;
      function bubbleWhile(fn: TFunction; skipSelf: Boolean): Boolean; overload;
      function contains(childOrId: JSValue {TModel or String or Double}): Boolean;
      function getDescendantCount: Double; overload;
      function getDescendantCount(onlyVisible: Boolean): Double; overload;
      function getDescendantCount(onlyVisible: Boolean; store: TStore): Double; overload;
      function insertChild(childRecord: JSValue {TModel or array of TModel}): JSValue {TModel or array of TModel}; overload;
      function insertChild(childRecord: JSValue {TModel or array of TModel}; before: TModel): JSValue {TModel or array of TModel}; overload;
      function insertChild(childRecord: JSValue {TModel or array of TModel}; before: TModel; silent: Boolean): JSValue {TModel or array of TModel}; overload;
      function isExpanded(store: TStore): Boolean;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}); overload;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}; isMove: Boolean); overload;
      procedure removeChild(childRecords: JSValue {TModel or array of TModel}; isMove: Boolean; silent: Boolean); overload;
      procedure traverse(fn: TFunction); overload;
      procedure traverse(fn: TFunction; skipSelf: Boolean); overload;
      procedure traverse(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean); overload;
      procedure traverseBefore(fn: TFunction); overload;
      procedure traverseBefore(fn: TFunction; skipSelf: Boolean); overload;
      procedure traverseBefore(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean); overload;
      function traverseWhile(fn: TFunction): Boolean; overload;
      function traverseWhile(fn: TFunction; skipSelf: Boolean): Boolean; overload;
      function traverseWhile(fn: TFunction; skipSelf: Boolean; includeFilteredOutRecords: Boolean): Boolean; overload;
    end;

    TStateTrackingManager = class external name 'StateTrackingManager'(TBase)
      autoRecord: Boolean;
      canRedo: Boolean;
      canUndo: Boolean;
      disabled: Boolean;
      isReady: Boolean;
      isRecording: Boolean;
      isRestoring: Boolean;
      _length: Double;
      position: Double;
      queue: array of String;
      state: TStateBase;
      stores: array of TStore;
      transaction: TTransaction;
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onDisabled: TFunction;
      onQueueReset: TFunction;
      onRecordingStart: TFunction;
      onRecordingStop: TFunction;
      onRestoringStart: TFunction;
      onRestoringStop: TFunction;
      constructor new(config: TStateTrackingManagerConfig);
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure addStore(store: TStore);
      procedure disable;
      procedure enable;
      procedure forEachStore(fn: TFunction);
      function hasListener(eventName: String): Boolean;
      function hasStore(store: TStore): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function redo: JSValue; overload; async;
      function redo(steps: Double): JSValue; overload; async;
      function redoAll: JSValue; async;
      procedure rejectTransaction;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure removeStore(store: TStore);
      procedure resetQueue;
      procedure resetRedoQueue;
      procedure resetUndoQueue;
      procedure resumeEvents;
      procedure startTransaction; overload;
      procedure startTransaction(title: String); overload;
      procedure stopTransaction; overload;
      procedure stopTransaction(title: String); overload;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      function undo: JSValue; overload; async;
      function undo(steps: Double): JSValue; overload; async;
      function undoAll: JSValue; async;
    end;

    TTransaction = class external name 'Transaction'
      _length: Double;
      queue: array of TActionBase;
      constructor new(config: TTransactionConfig);
      procedure addAction(action: JSValue {TActionBase or TJSObject});
      procedure redo;
      procedure undo;
    end;

    TActionBase = class external name 'ActionBase'
      &type: String;
      procedure redo;
      procedure undo;
    end;

    TModelStm = class external name 'ModelStm'
      stm: TStateTrackingManager;
    end;

    TStoreStm = class external name 'StoreStm'
      constructor new(config: TStoreStmConfig);
    end;

    TStateBase = class external name 'StateBase'
    end;

    TInstancePlugin = class external name 'InstancePlugin'(TBase)
      client: TWidget;
      disabled: Boolean;
      localeManager: TLocaleManagerClass;
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onDisable: TFunction;
      onEnable: TFunction;
      constructor new(config: TInstancePluginConfig);
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure doDisable;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      procedure updateLocalization;
    end;

    TContextMenuBase = class external name 'ContextMenuBase'(TInstancePlugin)
      menu: TMenu;
      menuContext: TJSObject;
      onContextMenuItem: TFunction;
      onContextMenuToggleItem: TFunction;
      constructor new(config: TContextMenuBaseConfig);
      procedure showContextMenu(event: TEvent); overload;
      procedure showContextMenu(event: TEvent; alignSpec: JSValue {TJSObject or THTMLElement}); overload;
    end;

    TAjaxHelper = class external name 'AjaxHelper'
      class function fetch(url: String; options: TJSObject): JSValue; async;
      class function get(url: String): JSValue; overload; async;
      class function get(url: String; options: TJSObject): JSValue; overload; async;
      class procedure mockUrl(url: String; response: JSValue {TJSObject or TFunction});
      class function post(url: String; payload: JSValue {String or TJSObject or TFormData}; options: TJSObject): JSValue; async;
    end;

    TAsyncHelper = class external name 'AsyncHelper'
      class function animationFrame: JSValue; async;
      class function sleep(millis: Double): JSValue; async;
      class function yield: JSValue; async;
    end;

    TBrowserHelper = class external name 'BrowserHelper'
      class var chromeVersion: Double;
      class var edgeVersion: Double;
      class var firefoxVersion: Double;
      class var isAndroid: Boolean;
      class var isChrome: Boolean;
      class var isEdge: Boolean;
      class var isFirefox: Boolean;
      class var isIE11: Boolean;
      class var isLinux: Boolean;
      class var isMac: Boolean;
      class var isMobileSafari: Boolean;
      class var isSafari: Boolean;
      class var isWebkit: Boolean;
      class var isWindows: Boolean;
      class function getCookie(name: String): String;
      class procedure searchParam(paramName: String); overload;
      class procedure searchParam(paramName: String; defaultValue: JSValue); overload;
      class procedure searchParam(paramName: String; defaultValue: JSValue; search: String); overload;
    end;

    TCSSHelper = class external name 'CSSHelper'
      class function findRule(selector: JSValue {String or TFunction}): TCSSRule;
      class function insertRule(cssText: String): TCSSRule;
    end;

    TDateHelper = class external name 'DateHelper'
      class var defaultFormat: String;
      class var defaultParseFormat: String;
      class var nonWorkingDays: TJSObject;
      class var weekStartDay: Double;
      class function add(date: JSValue {TDate or String}; amount: Double): TDate; overload;
      class function add(date: JSValue {TDate or String}; amount: Double; &unit: String): TDate; overload;
      class function &as(toUnit: String; amount: JSValue {Double or String}): Double; overload;
      class function &as(toUnit: String; amount: JSValue {Double or String}; fromUnit: String): Double; overload;
      class function asMilliseconds(amount: JSValue {Double or String}; &unit: String): Double;
      class function asMonths(time: TDate): Double;
      class function betweenLesser(date: TDate; start: TDate; &end: TDate): Boolean;
      class function betweenLesserEqual(date: TDate; start: TDate; &end: TDate): Boolean;
      class procedure ceil(time: TDate; increment: JSValue {String or Double or TJSObject}); overload;
      class procedure ceil(time: TDate; increment: JSValue {String or Double or TJSObject}; base: TDate); overload;
      class function clearTime(date: TDate): TDate; overload;
      class function clearTime(date: TDate; clone: Boolean): TDate; overload;
      class function clone(date: TDate): TDate;
      class function compare(first: TDate; second: TDate; &unit: String): Double;
      class procedure compareUnits(unit1: String; unit2: String);
      class function constrain(date: TDate): TDate; overload;
      class function constrain(date: TDate; min: TDate): TDate; overload;
      class function constrain(date: TDate; min: TDate; max: TDate): TDate; overload;
      class function copyTimeValues(targetDate: TDate; sourceDate: TDate): TDate;
      class function create(definition: TJSObject): TDate;
      class function daysInMonth(date: TDate): Double;
      class function diff(start: TDate; &end: TDate): Double; overload;
      class function diff(start: TDate; &end: TDate; &unit: String): Double; overload;
      class function diff(start: TDate; &end: TDate; &unit: String; fractional: Boolean): Double; overload;
      class procedure endOf(date: TDate);
      class procedure floor(time: TDate; increment: JSValue {String or Double}); overload;
      class procedure floor(time: TDate; increment: JSValue {String or Double}; base: TDate); overload;
      class function format(date: TDate; format: String): String;
      class function formatCount(count: Double; &unit: String): String;
      class procedure formatDelta(delta: Double); overload;
      class procedure formatDelta(delta: Double; options: TJSObject); overload;
      class procedure get(date: TDate; &unit: String);
      class function getDelta(delta: Double): TJSObject; overload;
      class function getDelta(delta: Double; options: TJSObject): TJSObject; overload;
      class function getDurationInUnit(start: TDate; &end: TDate; &unit: String): Double;
      class function getEndOfPreviousDay(date: TDate; noNeedToClearTime: Boolean): TDate;
      class function getFirstDateOfMonth(date: TDate): TDate;
      class function getLastDateOfMonth(date: TDate): TDate;
      class function getLocalizedNameOfUnit(&unit: String): String; overload;
      class function getLocalizedNameOfUnit(&unit: String; plural: Boolean): String; overload;
      class function getNext(date: TDate; &unit: String): TDate; overload;
      class function getNext(date: TDate; &unit: String; increment: Double): TDate; overload;
      class function getNext(date: TDate; &unit: String; increment: Double; weekStartDay: Double): TDate; overload;
      class function getShortNameOfUnit(&unit: String): String;
      class function getStartOfNextDay(date: TDate; clone: Boolean; noNeedToClearTime: Boolean): TDate;
      class function getTime(hours: JSValue {Double or TDate}): TDate; overload;
      class function getTime(hours: JSValue {Double or TDate}; minutes: Double): TDate; overload;
      class function getTime(hours: JSValue {Double or TDate}; minutes: Double; seconds: Double): TDate; overload;
      class function getTime(hours: JSValue {Double or TDate}; minutes: Double; seconds: Double; ms: Double): TDate; overload;
      class function getTimeOfDay(date: TDate): Double; overload;
      class function getTimeOfDay(date: TDate; &as: String): Double; overload;
      class function getUnitToBaseUnitRatio(baseUnit: String; &unit: String): Double; overload;
      class function getUnitToBaseUnitRatio(baseUnit: String; &unit: String; acceptEstimate: Boolean): Double; overload;
      class function getWeekNumber(date: TDate; weekStartDay: Double): array of Double;
      class function intersectSpans(date1Start: TDate; date1End: TDate; date2Start: TDate; date2End: TDate): Boolean;
      class function is24HourFormat(format: String): Boolean;
      class function isAfter(first: TDate; second: TDate): Boolean;
      class function isBefore(first: TDate; second: TDate): Boolean;
      class function isDate(value: JSValue): Boolean;
      class function isEqual(first: TDate; second: TDate; &unit: String): Boolean;
      class function isStartOf(date: TDate; &unit: String): Boolean;
      class function isValidDate(date: TDate): Boolean;
      class function max(first: TDate; second: TDate): TDate;
      class function min(first: TDate; second: TDate): TDate;
      class function normalizeUnit(&unit: String): String;
      class function parse(dateString: String; format: String): TDate;
      class function parseDuration(value: String): TJSObject; overload;
      class function parseDuration(value: String; allowDecimals: Boolean): TJSObject; overload;
      class function parseDuration(value: String; allowDecimals: Boolean; defaultUnit: String): TJSObject; overload;
      class procedure parseTimeUnit(unitName: JSValue);
      class procedure round(time: TDate; increment: JSValue {String or Double}); overload;
      class procedure round(time: TDate; increment: JSValue {String or Double}; base: TDate); overload;
      class function &set(date: TDate; &unit: JSValue {String or TJSObject}; amount: Double): TDate;
      class function startOf(date: TDate): TDate; overload;
      class function startOf(date: TDate; &unit: String): TDate; overload;
      class function startOf(date: TDate; &unit: String; clone: Boolean): TDate; overload;
      class function timeSpanContains(spanStart: TDate; spanEnd: TDate; otherSpanStart: TDate; otherSpanEnd: TDate): Boolean;
    end;

    TDomHelper = class external name 'DomHelper'
      class var activeElement: THTMLElement;
      class var scrollBarWidth: Double;
      class var themeInfo: TJSObject;
      class procedure addClasses(element: THTMLElement; classes: array of String);
      class procedure addLeft(element: THTMLElement; x: Double);
      class procedure addTemporaryClass(element: THTMLElement; cls: String; duration: Double; delayable: TDelayable);
      class procedure addTop(element: THTMLElement; y: Double);
      class procedure addTranslateX(element: THTMLElement; x: Double);
      class procedure addTranslateY(element: THTMLElement; y: Double);
      class procedure alignTo(element: THTMLElement; target: JSValue {THTMLElement or TRectangle}; alignSpec: TJSObject); overload;
      class procedure alignTo(element: THTMLElement; target: JSValue {THTMLElement or TRectangle}; alignSpec: TJSObject; round: Boolean); overload;
      class function append(parentElement: THTMLElement; elementOrConfig: JSValue {THTMLElement or TJSObject or String}): THTMLElement;
      class procedure applyStyle(element: THTMLElement; style: JSValue {String or TJSObject}); overload;
      class procedure applyStyle(element: THTMLElement; style: JSValue {String or TJSObject}; overwrite: Boolean); overload;
      class function children(element: THTMLElement; selector: String): array of THTMLElement;
      class function createElement(config: TDomConfig; options: JSValue {Boolean or TJSObject}): JSValue {THTMLElement or array of THTMLElement or TJSObject};
      class function down(element: THTMLElement; selector: String): THTMLElement;
      class function elementFromPoint(x: Double; y: Double): THTMLElement;
      class procedure focusWithoutScrolling(element: THTMLElement);
      class procedure forEachChild(element: THTMLElement; fn: TFunction);
      class procedure forEachSelector(element: THTMLElement; selector: String; fn: TFunction);
      class function getChild(element: THTMLElement; selector: String): THTMLElement;
      class function getEdgeSize(element: THTMLElement; edgeStyle: String): TJSObject; overload;
      class function getEdgeSize(element: THTMLElement; edgeStyle: String; edges: String): TJSObject; overload;
      class function getEventElement(event: JSValue {TEvent or TElement}): TElement; overload;
      class function getEventElement(event: JSValue {TEvent or TElement}; elementName: String): TElement; overload;
      class procedure getId(element: THTMLElement);
      class function getOffsetX(element: THTMLElement; container: THTMLElement): Double;
      class function getOffsetXY(element: THTMLElement; container: THTMLElement): array of Double;
      class function getOffsetY(element: THTMLElement; container: THTMLElement): Double;
      class function getPageX(element: THTMLElement): Double;
      class function getPageY(element: THTMLElement): Double;
      class function getParents(element: THTMLElement): array of THTMLElement;
      class function getStyleValue(element: THTMLElement; propName: JSValue {String or array of String}): JSValue {String or TJSObject}; overload;
      class function getStyleValue(element: THTMLElement; propName: JSValue {String or array of String}; &inline: Boolean): JSValue {String or TJSObject}; overload;
      class function getTranslateX(element: THTMLElement): Double;
      class function getTranslateXY(element: THTMLElement): array of Double;
      class function getTranslateY(element: THTMLElement): Double;
      class function hasChild(element: THTMLElement; selector: String): Boolean;
      class procedure highlight(element: JSValue {THTMLElement or TRectangle});
      class function insertBefore(into: THTMLElement; element: THTMLElement; beforeElement: THTMLElement): THTMLElement;
      class function insertFirst(into: THTMLElement; element: THTMLElement): THTMLElement;
      class function isCustomElement(element: THTMLElement): Boolean;
      class function isDescendant(parentElement: THTMLElement; childElement: THTMLElement): Boolean;
      class function isElement(value: JSValue): Boolean;
      class function isFocusable(element: THTMLElement): Boolean;
      class function isInView(element: THTMLElement): Boolean; overload;
      class function isInView(element: THTMLElement; whole: Boolean): Boolean; overload;
      class function isNode(value: JSValue): Boolean;
      class function isVisible(element: THTMLElement): Boolean;
      class function makeValidId(id: String): String;
      class function measureSize(size: String; sourceElement: THTMLElement): Double; overload;
      class function measureSize(size: String; sourceElement: THTMLElement; round: Boolean): Double; overload;
      class function measureText(text: String; sourceElement: THTMLElement): Double;
      class function parseStyle(style: String): TJSObject;
      class procedure removeClasses(element: THTMLElement; classes: array of String);
      class procedure removeEachSelector(element: THTMLElement; selector: String);
      class procedure resetScrollBarWidth;
      class procedure setLeft(element: THTMLElement; x: JSValue {Double or String});
      class function setLength(element: JSValue {String or THTMLElement}): String; overload;
      class function setLength(element: JSValue {String or THTMLElement}; style: String): String; overload;
      class function setLength(element: JSValue {String or THTMLElement}; style: String; value: JSValue {Double or String}): String; overload;
      class function setTheme(newThemeName: String): JSValue; async;
      class procedure setTop(element: THTMLElement; y: JSValue {Double or String});
      class procedure setTranslateX(element: THTMLElement; x: Double);
      class procedure setTranslateXY(element: THTMLElement); overload;
      class procedure setTranslateXY(element: THTMLElement; x: Double); overload;
      class procedure setTranslateXY(element: THTMLElement; x: Double; y: Double); overload;
      class procedure setTranslateY(element: THTMLElement; y: Double);
      class function sync(sourceElement: JSValue {String or THTMLElement}; targetElement: THTMLElement): THTMLElement;
      class procedure syncClassList(element: THTMLElement; newClasses: JSValue {array of String or String or TJSObject});
      class procedure toggleClasses(element: THTMLElement; classes: array of String); overload;
      class procedure toggleClasses(element: THTMLElement; classes: array of String; force: Boolean); overload;
      class function up(element: THTMLElement; selector: String): THTMLElement;
    end;

    TDomSync = class external name 'DomSync'
      class procedure addChild(parentElement: THTMLElement; childElement: THTMLElement; syncId: JSValue {String or Double});
      class procedure getChild(element: THTMLElement; path: String);
      class procedure removeChild(parentElement: THTMLElement; childElement: THTMLElement);
      class function sync(options: TJSObject): THTMLElement;
    end;

    TDragHelper = class external name 'DragHelper'(TBase)
      onBeforeDestroy: TFunction;
      onBeforeDragStart: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onDrag: TFunction;
      onDragStart: TFunction;
      onDrop: TFunction;
      constructor new(config: TDragHelperConfig);
      procedure abort;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure createProxy;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
    end;

    TEventHelper = class external name 'EventHelper'
      class var dblClickTime: Double;
      class var longPressTime: Double;
      class function addListener(element: THTMLElement; eventName: JSValue {String or TJSObject}): TFunction; overload;
      class function addListener(element: THTMLElement; eventName: JSValue {String or TJSObject}; handler: TFunction): TFunction; overload;
      class function addListener(element: THTMLElement; eventName: JSValue {String or TJSObject}; handler: TFunction; options: TJSObject): TFunction; overload;
      class function getClientPoint(event: TEvent): TPoint;
      class function getDistanceBetween(event1: TEvent; event2: TEvent): Double;
      class function getPagePoint(event: TEvent): TPoint;
      class function getXY(event: TEvent): array of Double;
      class function on(options: TJSObject): TFunction;
    end;

    TObjectHelper = class external name 'ObjectHelper'
      class function allKeys(&object: TJSObject): array of String;
      class procedure assertArray(value: TJSObject; name: String);
      class procedure assertBoolean(value: TJSObject; name: String);
      class procedure assertClass(value: TJSObject; name: String);
      class procedure assertFunction(value: TJSObject; name: String);
      class procedure assertInstance(value: TJSObject; name: String);
      class procedure assertNumber(value: TJSObject; name: String);
      class procedure assertObject(value: TJSObject; name: String);
      class procedure assertString(value: TJSObject; name: String);
      class procedure assertType(value: TJSObject; &type: String; name: String); overload;
      class procedure assertType(value: TJSObject; &type: String; name: String; allowNull: Boolean); overload;
      class function assign(dest: TJSObject; sources: TJSObject): TJSObject;
      class function assignIf(dest: TJSObject; sources: TJSObject): TJSObject;
      class function cleanupProperties(&object: TJSObject): TJSObject; overload;
      class function cleanupProperties(&object: TJSObject; keepNull: Boolean): TJSObject; overload;
      class function clone(value: JSValue): JSValue; overload;
      class function clone(value: JSValue; handler: TFunction): JSValue; overload;
      class procedure copyProperties(dest: TJSObject; source: TJSObject; props: array of String);
      class procedure copyPropertiesIf(dest: TJSObject; source: TJSObject; props: array of String);
      class procedure createTruthyKeys(source: JSValue {String or array of String});
      class procedure getMapPath(map: TMap<JSValue, JSValue>; path: JSValue {String or Double or array of String or array of Double}); overload;
      class procedure getMapPath(map: TMap<JSValue, JSValue>; path: JSValue {String or Double or array of String or array of Double}; defaultValue: TJSObject); overload;
      class function getPath(&object: TJSObject; path: String): JSValue;
      class function getPropertyDescriptor(&object: TJSObject; propertyName: String): TJSObject;
      class function getTruthyKeys(source: TJSObject): array of String;
      class function getTruthyValues(source: TJSObject): array of String;
      class function isDeeplyEqual(a: TJSObject; b: TJSObject): Boolean; overload;
      class function isDeeplyEqual(a: TJSObject; b: TJSObject; options: TJSObject): Boolean; overload;
      class function isEmpty(&object: TJSObject): Boolean;
      class function isEqual(a: JSValue; b: JSValue): JSValue;
      class function isLessThan(a: JSValue; b: JSValue): Boolean;
      class function isMoreThan(a: JSValue; b: JSValue): Boolean;
      class function isObject(value: TJSObject): Boolean;
      class function isPartial(a: JSValue; b: JSValue): Boolean;
      class function keys(&object: TJSObject): array of String; overload;
      class function keys(&object: TJSObject; ignore: JSValue {TJSObject or TFunction}): array of String; overload;
      class function merge(dest: TJSObject; sources: TJSObject): TJSObject;
      class function pathExists(&object: TJSObject; path: String): Boolean;
      class function removeAllProperties(&object: TJSObject): TJSObject;
      class function round(number: Double; digits: Double): Double;
      class function roundTo(number: Double): Double; overload;
      class function roundTo(number: Double; step: Double): Double; overload;
      class function setPath(&object: TJSObject; path: String; value: JSValue): TJSObject;
      class function toFixed(number: Double; digits: Double): String;
      class function transformArrayToNamedObject(arrayOfItems: array of TJSObject): TJSObject; overload;
      class function transformArrayToNamedObject(arrayOfItems: array of TJSObject; prop: String): TJSObject; overload;
      class function transformNamedObjectToArray(namedItems: TJSObject): array of TJSObject; overload;
      class function transformNamedObjectToArray(namedItems: TJSObject; prop: String): array of TJSObject; overload;
      class function typeOf(value: JSValue): String;
    end;

    TStringHelper = class external name 'StringHelper'
      class function capitalize(_string: String): String;
      class function capitalizeFirstLetter(_string: String): String;
      class function decodeHtml(str: String): String;
      class function encodeHtml(str: String): String;
      class function lowercaseFirstLetter(_string: String): String;
      class function safeJsonParse(_string: String): TJSObject;
      class function safeJsonStringify(&object: TJSObject): TJSObject; overload;
      class function safeJsonStringify(&object: TJSObject; replacer: JSValue {TFunction or array of String or array of Double}): TJSObject; overload;
      class function safeJsonStringify(&object: TJSObject; replacer: JSValue {TFunction or array of String or array of Double}; space: JSValue {String or Double}): TJSObject; overload;
      class function uncapitalize(_string: String): String;
      class procedure xss;
    end;

    TWidgetHelper = class external name 'WidgetHelper'
      class function append(widget: JSValue {TJSObject or array of TJSObject}): array of TWidget; overload;
      class function append(widget: JSValue {TJSObject or array of TJSObject}; config: JSValue {THTMLElement or String or TJSObject}): array of TWidget; overload;
      class function attachTooltip(element: THTMLElement; configOrText: JSValue {String or TJSObject}): TJSObject;
      class function createWidget(config: TJSObject): TJSObject;
      class procedure destroyTooltipAttached(element: THTMLElement);
      class function fromElement(element: JSValue {THTMLElement or TEvent}): TWidget; overload;
      class function fromElement(element: JSValue {THTMLElement or TEvent}; &type: JSValue {String or TFunction}): TWidget; overload;
      class function fromElement(element: JSValue {THTMLElement or TEvent}; &type: JSValue {String or TFunction}; limit: JSValue {THTMLElement or Double}): TWidget; overload;
      class function getById(Id: String): TWidget;
      class function hasTooltipAttached(element: THTMLElement): Boolean;
      class procedure mask(element: THTMLElement); overload;
      class procedure mask(element: THTMLElement; msg: String); overload;
      class function openPopup(element: THTMLElement; config: TJSObject): JSValue {JSValue or TJSObject};
      class function showContextMenu(element: JSValue {THTMLElement or array of Double}; config: TJSObject): JSValue {JSValue or TJSObject};
      class procedure toast(msg: String);
      class procedure unmask(element: THTMLElement);
    end;

    TXMLHelper = class external name 'XMLHelper'
      class function convertFromObject(obj: TJSObject): String; overload;
      class function convertFromObject(obj: TJSObject; options: TJSObject): String; overload;
    end;

    TDataGenerator = class external name 'DataGenerator'
      class function generateData(count: Double): array of TJSObject; overload;
      class function generateData(count: Double; randomHeight: Boolean): array of TJSObject; overload;
      class function generateData(count: Double; randomHeight: Boolean; initialId: Double): array of TJSObject; overload;
      class function generateData(count: Double; randomHeight: Boolean; initialId: Double; reset: Boolean): array of TJSObject; overload;
      class function generateRow: TJSObject;
    end;

    TDomClassList = class external name 'DomClassList'
      value: String;
      values: array of String;
      constructor new(classes: JSValue {String or TJSObject});
      procedure add(classes: String);
      procedure assign(classList: TJSObject);
      function clone: TDomClassList;
      function contains(className: String): Boolean;
      function isEqual(other: JSValue {TDomClassList or String}): Boolean;
      procedure remove(classes: String);
      function split: array of String;
      function trim: String;
    end;

    TFullscreen = class external name 'Fullscreen'
      class var enabled: Boolean;
      class var isFullscreen: Boolean;
      class function &exit: JSValue; async;
      class procedure onFullscreenChange(fn: TFunction);
      class function request(element: THTMLElement): JSValue; async;
      class procedure unFullscreenChange(fn: TFunction);
    end;

    TNumberFormat = class external name 'NumberFormat'
      constructor new(config: TNumberFormatConfig);
      function &as(change: JSValue {String or TJSObject}): TNumberFormat; overload;
      function &as(change: JSValue {String or TJSObject}; cacheAs: String): TNumberFormat; overload;
      function format(value: Double): String;
      function parse(value: String): Double; overload;
      function parse(value: String; strict: Boolean): Double; overload;
      function parseStrict(value: String): Double;
      function round(value: JSValue {Double or String}): Double;
      function truncate(value: JSValue {Double or String}): Double;
    end;

    TRectangle = class external name 'Rectangle'
      bottom: Double;
      center: TPoint;
      height: Double;
      left: Double;
      right: Double;
      top: Double;
      width: Double;
      x: Double;
      y: Double;
      class function client(element: THTMLElement): TRectangle; overload;
      class function client(element: THTMLElement; relativeTo: THTMLElement): TRectangle; overload;
      class function client(element: THTMLElement; relativeTo: THTMLElement; ignorePageScroll: Boolean): TRectangle; overload;
      class function content(element: THTMLElement): TRectangle; overload;
      class function content(element: THTMLElement; relativeTo: THTMLElement): TRectangle; overload;
      class function content(element: THTMLElement; relativeTo: THTMLElement; ignorePageScroll: Boolean): TRectangle; overload;
      class function from(element: THTMLElement): TRectangle; overload;
      class function from(element: THTMLElement; relativeTo: THTMLElement): TRectangle; overload;
      class function from(element: THTMLElement; relativeTo: THTMLElement; ignorePageScroll: Boolean): TRectangle; overload;
      class function fromScreen(element: THTMLElement): TRectangle; overload;
      class function fromScreen(element: THTMLElement; relativeTo: THTMLElement): TRectangle; overload;
      class function inner(element: THTMLElement): TRectangle; overload;
      class function inner(element: THTMLElement; relativeTo: THTMLElement): TRectangle; overload;
      class function inner(element: THTMLElement; relativeTo: THTMLElement; ignorePageScroll: Boolean): TRectangle; overload;
      class function union(rectangles: array of TRectangle): TRectangle;
      procedure adjust(x: Double; y: Double; width: Double; height: Double);
      function alignTo(spec: TJSObject): TRectangle;
      procedure clone;
      procedure constrainTo(constrainTo: TRectangle; strict: Boolean);
      function contains(other: TRectangle): Boolean;
      procedure highlight;
      function intersect(other: TRectangle): JSValue {TRectangle or Boolean}; overload;
      function intersect(other: TRectangle; useBoolean: Boolean): JSValue {TRectangle or Boolean}; overload;
      function intersect(other: TRectangle; useBoolean: Boolean; allowZeroDimensions: Boolean): JSValue {TRectangle or Boolean}; overload;
      procedure moveTo(x: Double; y: Double);
      procedure roundPx; overload;
      procedure roundPx(devicePixelRatio: Double); overload;
      procedure translate(x: Double; y: Double);
    end;

    TPoint = class external name 'Point'(TRectangle)
      procedure constrain(into: TRectangle);
    end;

    TRandomGenerator = class external name 'RandomGenerator'
      function fromArray(&array: array of JSValue): JSValue;
      function nextRandom(max: Double): Double;
      procedure reset;
    end;

    TScroller = class external name 'Scroller'(TBase)
      clientHeight: Double;
      clientWidth: Double;
      id: String;
      maxX: Double;
      maxY: Double;
      overflowX: JSValue {Boolean or String};
      overflowY: JSValue {Boolean or String};
      scrollHeight: Double;
      scrollWidth: Double;
      viewport: TRectangle;
      x: Double;
      y: Double;
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onScroll: TFunction;
      onScrollend: TFunction;
      constructor new(config: TScrollerConfig);
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure addPartner(otherScroller: TScroller); overload;
      procedure addPartner(otherScroller: TScroller; axes: JSValue {String or TJSObject}); overload;
      function hasListener(eventName: String): Boolean;
      procedure hasScrollbar; overload;
      procedure hasScrollbar(axis: JSValue); overload;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure removePartner(otherScroller: TScroller);
      procedure resumeEvents;
      function scrollBy: JSValue; overload; async;
      function scrollBy(xDelta: Double): JSValue; overload; async;
      function scrollBy(xDelta: Double; yDelta: Double): JSValue; overload; async;
      function scrollBy(xDelta: Double; yDelta: Double; options: JSValue {TJSObject or Boolean}): JSValue; overload; async;
      function scrollIntoView(element: JSValue {THTMLElement or TRectangle}): JSValue; overload; async;
      function scrollIntoView(element: JSValue {THTMLElement or TRectangle}; options: TJSObject): JSValue; overload; async;
      function scrollTo: JSValue; overload; async;
      function scrollTo(toX: Double): JSValue; overload; async;
      function scrollTo(toX: Double; toY: Double): JSValue; overload; async;
      function scrollTo(toX: Double; toY: Double; options: JSValue {TJSObject or Boolean}): JSValue; overload; async;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
    end;

    TLocaleHelper = class external name 'LocaleHelper'
      class function mergeLocales(locales: TJSObject): TJSObject;
      class procedure publishLocale(localeName: String; config: TJSObject);
      class procedure trimLocale(locale: TJSObject; trimLocale: TJSObject);
    end;

    TLocaleManagerSingleton = class external name 'LocaleManagerSingleton'
      locale: JSValue {String or TJSObject};
      locales: TJSObject;
      throwOnMissingLocale: Boolean;
      onLocale: TFunction;
      function applyLocale(name: String): JSValue {Boolean or JSValue};
      procedure extendLocale(name: String; config: TJSObject);
      procedure registerLocale(name: String; config: TJSObject);
    end;

    TLocalizable = class external name 'Localizable'
      localeManager: TLocaleManagerClass;
      constructor new(config: TLocalizableConfig);
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      procedure updateLocalization;
    end;

    TDelayable = class external name 'Delayable'
    end;

    TEvents = class external name 'Events'
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      constructor new(config: TEventsConfig);
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
    end;

    TLoadMaskable = class external name 'LoadMaskable'
      constructor new(config: TLoadMaskableConfig);
    end;

    TOverride = class external name 'Override'
      class procedure apply(override: TJSObject);
    end;

    TPluggable = class external name 'Pluggable'
      plugins: TJSObject;
      constructor new(config: TPluggableConfig);
      procedure addPlugins(plugins: array of TFunction);
      function getPlugin(pluginClassOrName: JSValue {String or TFunction}): TJSObject;
      function hasPlugin(pluginClassOrName: JSValue {String or TFunction}): Boolean;
    end;

    TState = class external name 'State'
      state: TJSObject;
    end;

    TClickRepeater = class external name 'ClickRepeater'
      constructor new(config: TClickRepeaterConfig);
    end;

    TCollection = class external name 'Collection'
      allValues: array of TJSObject;
      count: Double;
      filterFunction: TFunction;
      filters: TCollection;
      generation: Double;
      idProperty: String;
      isFiltered: Boolean;
      isSorted: Boolean;
      sortFunction: TFunction;
      sorters: TCollection;
      totalCount: Double;
      values: array of TJSObject;
      onChange: TFunction;
      onNoChange: TFunction;
      constructor new(config: TCollectionConfig);
      procedure add(items: TJSObject);
      function addFilter(filter: TJSObject): TCollectionFilter;
      function addSorter(sorter: TJSObject): TCollectionSorter;
      procedure changeId(item: JSValue {String or Double or TJSObject}; newId: JSValue {String or Double});
      procedure clear;
      function find(fn: TFunction): TJSObject; overload;
      function find(fn: TFunction; ignoreFilters: Boolean): TJSObject; overload;
      function findIndex(propertyName: String; value: JSValue): Double; overload;
      function findIndex(propertyName: String; value: JSValue; ignoreFilters: Boolean): Double; overload;
      function findItem(propertyName: String; value: JSValue): JSValue {TJSObject or TSet<JSValue>}; overload;
      function findItem(propertyName: String; value: JSValue; ignoreFilters: Boolean): JSValue {TJSObject or TSet<JSValue>}; overload;
      procedure forEach(fn: TFunction); overload;
      procedure forEach(fn: TFunction; ignoreFilters: Boolean); overload;
      function get(id: JSValue): TJSObject; overload;
      function get(id: JSValue; ignoreFilters: Boolean): TJSObject; overload;
      function getBy(propertyName: String; value: JSValue): TJSObject; overload;
      function getBy(propertyName: String; value: JSValue; ignoreFilters: Boolean): TJSObject; overload;
      function includes(item: JSValue {TJSObject or String or Double}): Boolean; overload;
      function includes(item: JSValue {TJSObject or String or Double}; ignoreFilters: Boolean): Boolean; overload;
      function indexOf(item: JSValue {TJSObject or String or Double}): Double; overload;
      function indexOf(item: JSValue {TJSObject or String or Double}; ignoreFilters: Boolean): Double; overload;
      function map(fn: TFunction): array of TJSObject; overload;
      function map(fn: TFunction; ignoreFilters: Boolean): array of TJSObject; overload;
      function move(items: JSValue {TJSObject or array of TJSObject}): Double; overload;
      function move(items: JSValue {TJSObject or array of TJSObject}; beforeItem: TJSObject): Double; overload;
      procedure remove(items: TJSObject);
      procedure splice; overload;
      procedure splice(index: Double); overload;
      procedure splice(index: Double; toRemove: JSValue {array of TJSObject or Double}); overload;
      procedure splice(index: Double; toRemove: JSValue {array of TJSObject or Double}; toAdd: JSValue {array of TJSObject or TJSObject}); overload;
    end;

    TCollectionFilter = class external name 'CollectionFilter'
      filterBy: TFunction;
      operator: String;
      &property: String;
      value: JSValue;
      constructor new(config: TCollectionFilterConfig);
    end;

    TCollectionSorter = class external name 'CollectionSorter'
      constructor new(config: TCollectionSorterConfig);
    end;

    TMonth = class external name 'Month'
      canonicalDayNumbers: array of Double;
      dayColumnIndex: array of Double;
      dayCount: Double;
      endDate: TDate;
      startDate: TDate;
      visibleDayColumnIndex: array of Double;
      weekCount: Double;
      weekLength: Double;
      onDateChange: TFunction;
      onMonthChange: TFunction;
      onWeekChange: TFunction;
      onYearChange: TFunction;
      constructor new(config: TMonthConfig);
      procedure eachDay(fn: TFunction);
      procedure eachWeek(fn: TFunction);
      function getWeekNumber(date: TDate): array of Double;
      procedure getWeekStart(week: JSValue {Double or array of Double});
    end;

    TScrollManager = class external name 'ScrollManager'
      isScrolling: Boolean;
      constructor new(config: TScrollManagerConfig);
      function startMonitoring(config: TJSObject): TFunction;
      procedure stopMonitoring; overload;
      procedure stopMonitoring(element: JSValue {THTMLElement or array of THTMLElement}); overload;
    end;

    TWidget = class external name 'Widget'(TBase)
    public
      class var name: String;
    public
      alignSelf: String;
      anchorSize: array of Double;
      content: String;
      contentElement: THTMLElement;
      dataset: TJSObject;
      disabled: Boolean;
      element: THTMLElement;
      flex: JSValue {Double or String};
      focusElement: THTMLElement;
      height: JSValue {Double or String};
      hidden: Boolean;
      html: String;
      id: String;
      isVisible: Boolean;
      localeManager: TLocaleManagerClass;
      margin: JSValue {Double or String};
      maxHeight: JSValue {String or Double};
      maxWidth: JSValue {String or Double};
      minHeight: JSValue {String or Double};
      minWidth: JSValue {String or Double};
      nextSibling: TWidget;
      overflowElement: THTMLElement;
      owner: TWidget;
      previousSibling: TWidget;
      readOnly: Boolean;
      scrollable: TScroller;
      style: JSValue {String or TJSObject or TCSSStyleDeclaration};
      tab: TTab;
      tooltip: JSValue {String or TJSObject};
      width: JSValue {Double or String};
      x: Double;
      y: Double;
      onBeforeDestroy: TFunction;
      onBeforeHide: TFunction;
      onBeforeShow: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onFocusIn: TFunction;
      onFocusOut: TFunction;
      onHide: TFunction;
      onPaint: TFunction;
      onReadOnly: TFunction;
      onResize: TFunction;
      onShow: TFunction;
      constructor new(config: TWidgetConfig);
      class function attachTooltip(element: THTMLElement; configOrText: JSValue {TJSObject or String}): THTMLElement;
      class function fromElement(element: JSValue {THTMLElement or TEvent}): TWidget; overload;
      class function fromElement(element: JSValue {THTMLElement or TEvent}; &type: JSValue {String or TFunction}): TWidget; overload;
      class function fromElement(element: JSValue {THTMLElement or TEvent}; &type: JSValue {String or TFunction}; limit: JSValue {THTMLElement or Double}): TWidget; overload;
      class procedure initClass;
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      class function query(selector: JSValue {String or TFunction}): TWidget; overload;
      class function query(selector: JSValue {String or TFunction}; deep: Boolean): TWidget; overload;
      class function queryAll(selector: JSValue {String or TFunction}): array of TWidget; overload;
      class function queryAll(selector: JSValue {String or TFunction}; deep: Boolean): array of TWidget; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure alignTo; overload;
      procedure alignTo(spec: TJSObject); overload;
      procedure closest(selector: JSValue {String or TFunction}); overload;
      procedure closest(selector: JSValue {String or TFunction}; deep: Boolean); overload;
      procedure closest(selector: JSValue {String or TFunction}; deep: Boolean; limit: JSValue {Double or String or TWidget}); overload;
      function compose: TJSObject;
      function contains(elementOrWidget: JSValue {THTMLElement or TWidget}): Boolean; overload;
      function contains(elementOrWidget: JSValue {THTMLElement or TWidget}; strict: Boolean): Boolean; overload;
      procedure disable;
      function eachAncestor(fn: TFunction): Boolean;
      function eachWidget(fn: TFunction): Boolean; overload;
      function eachWidget(fn: TFunction; deep: Boolean): Boolean; overload;
      procedure enable;
      function exitFullscreen: JSValue; async;
      procedure focus;
      function hasListener(eventName: String): Boolean;
      function hide: JSValue; overload; async;
      function hide(animate: Boolean): JSValue; overload; async;
      function mask(msg: JSValue {String or TJSObject}): TMask;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure owns(target: JSValue {THTMLElement or TEvent or TWidget});
      procedure recompose;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      function requestFullscreen: JSValue; async;
      procedure resumeEvents;
      procedure revertFocus; overload;
      procedure revertFocus(force: Boolean); overload;
      procedure setXY; overload;
      procedure setXY(x: Double); overload;
      procedure setXY(x: Double; y: Double); overload;
      function show: JSValue; async;
      function showBy(spec: JSValue {TJSObject or THTMLElement}): JSValue; async;
      function showByPoint(x: JSValue {Double or array of Double}): JSValue; overload; async;
      function showByPoint(x: JSValue {Double or array of Double}; y: Double): JSValue; overload; async;
      function showByPoint(x: JSValue {Double or array of Double}; y: Double; options: TJSObject): JSValue; overload; async;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      procedure toFront;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      procedure unmask;
      procedure up(selector: JSValue {String or TFunction}); overload;
      procedure up(selector: JSValue {String or TFunction}; deep: Boolean); overload;
      procedure up(selector: JSValue {String or TFunction}; deep: Boolean; limit: JSValue {Double or String or TWidget}); overload;
      procedure updateLocalization;
    end;

    TButton = class external name 'Button'(TWidget)
      badge: String;
      icon: String;
      iconAlign: String;
      menu: TWidget;
      pressed: Boolean;
      pressedIcon: String;
      text: String;
      onAction: TFunction;
      onClick: TFunction;
      onToggle: TFunction;
      constructor new(config: TButtonConfig);
      function eachWidget(fn: TFunction): Boolean; overload;
      function eachWidget(fn: TFunction; deep: Boolean): Boolean; overload;
      procedure toggle(pressed: Boolean);
    end;

    TContainer = class external name 'Container'(TWidget)
      isSettingValues: Boolean;
      isValid: Boolean;
      items: JSValue {array of TWidget or TJSObject or TWidgetConfig};
      layout: TLayout;
      layoutStyle: TJSObject;
      &record: TModel;
      values: TJSObject;
      widgetMap: TJSObject;
      onBeforeSetRecord: TFunction;
      constructor new(config: TContainerConfig);
      function add(toAdd: JSValue {TJSObject or array of TJSObject or TWidget or array of TWidget or TWidgetConfig or array of TWidgetConfig}): JSValue {TWidget or array of TWidget};
      function getWidgetById(id: String): TWidget;
      function insert(toAdd: TWidget; index: JSValue {Double or TWidget}): TWidget;
      procedure processWidgetConfig;
      function remove(toRemove: TWidget): JSValue {TWidget or array of TWidget};
      function removeAll: array of TWidget;
    end;

    TButtonGroup = class external name 'ButtonGroup'(TContainer)
      onAction: TFunction;
      onClick: TFunction;
      onToggle: TFunction;
      constructor new(config: TButtonGroupConfig);
    end;

    TPanel = class external name 'Panel'(TContainer)
      bbar: TToolbar;
      tbar: TToolbar;
      tools: TJSObject;
      onToolClick: TFunction;
      constructor new(config: TPanelConfig);
    end;

    TCalendarPanel = class external name 'CalendarPanel'(TPanel)
      date: TDate;
      endDate: TDate;
      startDate: TDate;
      visibleWeekCount: Double;
      onDateChange: TFunction;
      onRefresh: TFunction;
      constructor new(config: TCalendarPanelConfig);
      procedure refresh;
      procedure updateDate;
      procedure updateWeekStartDay;
    end;

    TField = class external name 'Field'(TWidget)
    public
      class var errorTip: TTooltip;
    public
      badge: String;
      isEmpty: Boolean;
      isEmptyInput: Boolean;
      isValid: Boolean;
      &label: String;
      triggers: TJSObject;
      value: JSValue;
      onAction: TFunction;
      onChange: TFunction;
      onClear: TFunction;
      onInput: TFunction;
      onTrigger: TFunction;
      constructor new(config: TFieldConfig);
      procedure clear;
      procedure clearError; overload;
      procedure clearError(error: String); overload;
      procedure clearError(error: String; silent: Boolean); overload;
      function getErrors: array of String;
      procedure select; overload;
      procedure select(start: Double); overload;
      procedure select(start: Double; &end: Double); overload;
      procedure setError(error: String); overload;
      procedure setError(error: String; silent: Boolean); overload;
    end;

    TCheckbox = class external name 'Checkbox'(TField)
      checked: Boolean;
      name: String;
      value: String;
      onAction: TFunction;
      onBeforeChange: TFunction;
      onChange: TFunction;
      constructor new(config: TCheckboxConfig);
      procedure check;
      procedure toggle;
      procedure uncheck;
    end;

    TList = class external name 'List'(TWidget)
      items: array of TJSObject;
      store: TStore;
      onItem: TFunction;
      constructor new(config: TListConfig);
    end;

    TChipView = class external name 'ChipView'(TList)
      constructor new(config: TChipViewConfig);
    end;

    TTextField = class external name 'TextField'(TField)
      constructor new(config: TTextFieldConfig);
    end;

    TPickerField = class external name 'PickerField'(TTextField)
      picker: TWidget;
      constructor new(config: TPickerFieldConfig);
      function eachWidget(fn: TFunction): Boolean; overload;
      function eachWidget(fn: TFunction; deep: Boolean): Boolean; overload;
      procedure hidePicker;
      procedure showPicker;
      procedure togglePicker;
    end;

    TCombo = class external name 'Combo'(TPickerField)
    public
      class var queryLast: String;
    public
      filterOperator: String;
      isEmpty: Boolean;
      &record: array of TModel;
      records: array of TModel;
      store: JSValue {TStore or TJSObject or TStoreConfig};
      value: TJSObject;
      valueCollection: TCollection;
      onAction: TFunction;
      onInput: TFunction;
      onSelect: TFunction;
      constructor new(config: TComboConfig);
    end;

    TDateField = class external name 'DateField'(TPickerField)
      format: String;
      max: JSValue {String or TDate};
      min: JSValue {String or TDate};
      step: JSValue {String or Double or TJSObject};
      value: JSValue {String or TDate};
      constructor new(config: TDateFieldConfig);
    end;

    TDatePicker = class external name 'DatePicker'(TCalendarPanel)
      onSelectionChange: TFunction;
      constructor new(config: TDatePickerConfig);
    end;

    TDateTimeField = class external name 'DateTimeField'(TField)
      dateField: TDateField;
      timeField: TTimeField;
      constructor new(config: TDateTimeFieldConfig);
    end;

    TDisplayField = class external name 'DisplayField'(TField)
      constructor new(config: TDisplayFieldConfig);
    end;

    TDurationField = class external name 'DurationField'(TTextField)
      magnitude: Double;
      milliseconds: Double;
      &unit: String;
      value: JSValue {String or Double or TJSObject or TDuration};
      onAction: TFunction;
      onChange: TFunction;
      constructor new(config: TDurationFieldConfig);
    end;

    TEditor = class external name 'Editor'(TContainer)
      onBeforeCancel: TFunction;
      onBeforeComplete: TFunction;
      onBeforeStart: TFunction;
      onCancel: TFunction;
      onComplete: TFunction;
      onKeypress: TFunction;
      onStart: TFunction;
      constructor new(config: TEditorConfig);
      procedure cancelEdit;
      procedure completeEdit;
      procedure startEdit(editObject: TJSObject);
    end;

    TFileField = class external name 'FileField'(TField)
      files: TFileList;
      constructor new(config: TFileFieldConfig);
      procedure clear;
    end;

    TFilePicker = class external name 'FilePicker'(TContainer)
      files: TFileList;
      onChange: TFunction;
      onClear: TFunction;
      constructor new(config: TFilePickerConfig);
      procedure clear;
    end;

    TFilterField = class external name 'FilterField'(TTextField)
      constructor new(config: TFilterFieldConfig);
    end;

    TMask = class external name 'Mask'
      maxProgress: Double;
      progress: Double;
      constructor new(config: TMaskConfig);
      class function mask(text: JSValue {String or TJSObject}; target: THTMLElement): TMask;
      class function unmask(element: THTMLElement): JSValue; async;
      function close: JSValue; async;
      function hide: JSValue; async;
      procedure show;
    end;

    TPopup = class external name 'Popup'(TPanel)
      maximized: Boolean;
      onBeforeClose: TFunction;
      constructor new(config: TPopupConfig);
      procedure close;
    end;

    TMenu = class external name 'Menu'(TPopup)
      currentSubMenu: TMenu;
      isSubMenu: Boolean;
      parentMenu: TMenu;
      selectedElement: THTMLElement;
      onItem: TFunction;
      onToggle: TFunction;
      constructor new(config: TMenuConfig);
    end;

    TMenuItem = class external name 'MenuItem'(TWidget)
      checked: Boolean;
      menu: TWidget;
      onItem: TFunction;
      onToggle: TFunction;
      constructor new(config: TMenuItemConfig);
      procedure doAction;
    end;

    TMessageDialogSingleton = class external name 'MessageDialogSingleton'(TPopup)
      cancelButton: Double;
      okButton: Double;
      function alert(options: TJSObject): JSValue; async;
      function confirm(options: TJSObject): JSValue; async;
      function prompt(options: TJSObject): JSValue; async;
    end;

    TNumberField = class external name 'NumberField'(TField)
      step: Double;
      constructor new(config: TNumberFieldConfig);
      procedure changeValue;
    end;

    TToolbar = class external name 'Toolbar'(TContainer)
      constructor new(config: TToolbarConfig);
    end;

    TPagingToolbar = class external name 'PagingToolbar'(TToolbar)
      constructor new(config: TPagingToolbarConfig);
    end;

    TSlideToggle = class external name 'SlideToggle'(TCheckbox)
      constructor new(config: TSlideToggleConfig);
    end;

    TSlider = class external name 'Slider'(TWidget)
      max: Double;
      min: Double;
      step: Double;
      text: String;
      value: Double;
      onChange: TFunction;
      onInput: TFunction;
      constructor new(config: TSliderConfig);
    end;

    TSplitter = class external name 'Splitter'(TWidget)
      currentOrientation: String;
      orientation: String;
      constructor new(config: TSplitterConfig);
    end;

    TTab = class external name 'Tab'(TButton)
      constructor new(config: TTabConfig);
    end;

    TTabBar = class external name 'TabBar'(TToolbar)
      constructor new(config: TTabBarConfig);
    end;

    TTabPanel = class external name 'TabPanel'(TContainer)
      activeIndex: Double;
      activeItem: TWidget;
      activeTab: Double;
      onTabChange: TFunction;
      constructor new(config: TTabPanelConfig);
    end;

    TTextAreaField = class external name 'TextAreaField'(TField)
      constructor new(config: TTextAreaFieldConfig);
    end;

    TTimeField = class external name 'TimeField'(TPickerField)
      format: String;
      max: JSValue {String or TDate};
      min: JSValue {String or TDate};
      step: JSValue {String or Double or TJSObject};
      constructor new(config: TTimeFieldConfig);
      procedure focusPicker;
      procedure showPicker;
    end;

    TToast = class external name 'Toast'
      constructor new(config: TToastConfig);
      class procedure hideAll;
      class function show(config: JSValue {String or TJSObject}): TToast;
      procedure hide;
    end;

    TTool = class external name 'Tool'(TWidget)
      constructor new(config: TToolConfig);
    end;

    TTooltip = class external name 'Tooltip'(TPopup)
    public
      class var currentOverElement: THTMLElement;
    public
      activeTarget: THTMLElement;
      html: String;
      triggeredByEvent: TEvent;
      onBeforeShow: TFunction;
      onPointerOver: TFunction;
      constructor new(config: TTooltipConfig);
      procedure showAsyncMessage(message: String);
    end;

    TUndoRedoBase = class external name 'UndoRedoBase'(TContainer)
      constructor new(config: TUndoRedoBaseConfig);
    end;

    THistogram = class external name 'Histogram'(TWidget)
      constructor new(config: THistogramConfig);
    end;

    TScale = class external name 'Scale'(TWidget)
      constructor new(config: TScaleConfig);
    end;

    TLayout = class external name 'Layout'
      owner: TWidget;
      constructor new(config: TLayoutConfig);
    end;

    TBadge = class external name 'Badge'
      badge: String;
      constructor new(config: TBadgeConfig);
    end;

    TResponsive = class external name 'Responsive'
      onResponsiveHeightChange: TFunction;
      onResponsiveWidthChange: TFunction;
      constructor new(config: TResponsiveConfig);
    end;

    TStyleable = class external name 'Styleable'
      css: TProxyClass;
      constructor new(config: TStyleableConfig);
    end;

    TColumn = class external name 'Column'(TModel)
      contentElement: THTMLElement;
      defaults: TJSObject;
      element: THTMLElement;
      field: String;
      flex: String;
      hidden: Boolean;
      icon: String;
      localeManager: TLocaleManagerClass;
      subGrid: TSubGrid;
      text: String;
      textElement: THTMLElement;
      textWrapper: THTMLElement;
      width: JSValue {Double or String};
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      constructor new(config: TColumnConfig);
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function getRawValue(&record: TModel): JSValue;
      function hasListener(eventName: String): Boolean;
      procedure hide;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure refreshCell(&record: TModel);
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resizeToFitContent(widthMin: JSValue {Double or array of Double}; widthMax: Double);
      procedure resumeEvents;
      procedure show;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      procedure toggle(force: Boolean);
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      procedure updateLocalization;
    end;

    TActionColumn = class external name 'ActionColumn'(TColumn)
      constructor new(config: TActionColumnConfig);
    end;

    TAggregateColumn = class external name 'AggregateColumn'(TColumn)
      constructor new(config: TAggregateColumnConfig);
    end;

    TWidgetColumn = class external name 'WidgetColumn'(TColumn)
      constructor new(config: TWidgetColumnConfig);
      procedure onAfterWidgetSetValue(widget: TWidget; renderData: TJSObject);
      procedure onBeforeWidgetSetValue(widget: TWidget; renderData: TJSObject);
    end;

    TCheckColumn = class external name 'CheckColumn'(TWidgetColumn)
      onBeforeToggle: TFunction;
      onToggle: TFunction;
      onToggleAll: TFunction;
      constructor new(config: TCheckColumnConfig);
    end;

    TDateColumn = class external name 'DateColumn'(TColumn)
      format: String;
      constructor new(config: TDateColumnConfig);
    end;

    TNumberColumn = class external name 'NumberColumn'(TColumn)
      constructor new(config: TNumberColumnConfig);
    end;

    TPercentColumn = class external name 'PercentColumn'(TColumn)
      constructor new(config: TPercentColumnConfig);
    end;

    TRatingColumn = class external name 'RatingColumn'(TNumberColumn)
      constructor new(config: TRatingColumnConfig);
    end;

    TRowNumberColumn = class external name 'RowNumberColumn'(TColumn)
      constructor new(config: TRowNumberColumnConfig);
      procedure resizeToFitContent;
    end;

    TTemplateColumn = class external name 'TemplateColumn'(TColumn)
      constructor new(config: TTemplateColumnConfig);
    end;

    TTimeColumn = class external name 'TimeColumn'(TColumn)
      format: String;
      constructor new(config: TTimeColumnConfig);
    end;

    TTreeColumn = class external name 'TreeColumn'(TColumn)
      constructor new(config: TTreeColumnConfig);
    end;

    TGridTag = class external name 'GridTag'(TWidgetTag)
      constructor new(config: TGridTagConfig);
    end;

    TColumnStore = class external name 'ColumnStore'(TStore)
      bottomColumns: array of TColumn;
      topColumns: array of TColumn;
      visibleColumns: array of TColumn;
      onColumnHide: TFunction;
      onColumnShow: TFunction;
      constructor new(config: TColumnStoreConfig);
      class procedure registerColumnType(columnClass: TFunction); overload;
      class procedure registerColumnType(columnClass: TFunction; simpleRenderer: Boolean); overload;
      function get(field: String): TColumn;
      function indexOf(recordOrId: JSValue {TModel or String}): Double;
    end;

    TGridRowModel = class external name 'GridRowModel'(TModel)
      cls: String;
      expanded: Boolean;
      href: String;
      iconCls: String;
      rowHeight: Double;
      target: String;
      constructor new(config: TGridRowModelConfig);
    end;

    TCellEdit = class external name 'CellEdit'(TInstancePlugin)
      activeRecord: TModel;
      isEditing: Boolean;
      onBeforeCellEditStart: TFunction;
      onBeforeFinishCellEdit: TFunction;
      onCancelCellEdit: TFunction;
      onFinishCellEdit: TFunction;
      onStartCellEdit: TFunction;
      constructor new(config: TCellEditConfig);
      procedure cancelEditing; overload;
      procedure cancelEditing(silent: Boolean); overload;
      procedure confirm(options: TJSObject);
      procedure finishEditing;
      function startEditing(cellContext: TJSObject): Boolean;
    end;

    TCellMenu = class external name 'CellMenu'(TContextMenuBase)
      onCellMenuBeforeShow: TFunction;
      onCellMenuItem: TFunction;
      onCellMenuShow: TFunction;
      onCellMenuToggleItem: TFunction;
      constructor new(config: TCellMenuConfig);
    end;

    TCellTooltip = class external name 'CellTooltip'(TInstancePlugin)
      constructor new(config: TCellTooltipConfig);
    end;

    TColumnAutoWidth = class external name 'ColumnAutoWidth'(TInstancePlugin)
      constructor new(config: TColumnAutoWidthConfig);
    end;

    TColumnDragToolbar = class external name 'ColumnDragToolbar'(TInstancePlugin)
      constructor new(config: TColumnDragToolbarConfig);
    end;

    TColumnPicker = class external name 'ColumnPicker'(TInstancePlugin)
      constructor new(config: TColumnPickerConfig);
    end;

    TColumnReorder = class external name 'ColumnReorder'(TInstancePlugin)
      constructor new(config: TColumnReorderConfig);
    end;

    TColumnResize = class external name 'ColumnResize'(TInstancePlugin)
      constructor new(config: TColumnResizeConfig);
    end;

    TContextMenu = class external name 'ContextMenu'(TInstancePlugin)
      onCellContextMenuBeforeShow: TFunction;
      onCellContextMenuShow: TFunction;
      onContextMenuItem: TFunction;
      onContextMenuToggleItem: TFunction;
      onHeaderContextMenuBeforeShow: TFunction;
      onHeaderContextMenuShow: TFunction;
      constructor new(config: TContextMenuConfig);
    end;

    TFilter = class external name 'Filter'(TInstancePlugin)
      constructor new(config: TFilterConfig);
      procedure closeFilterEditor;
      procedure showFilterEditor(column: JSValue {TColumn or String}); overload;
      procedure showFilterEditor(column: JSValue {TColumn or String}; value: JSValue); overload;
    end;

    TFilterBar = class external name 'FilterBar'(TInstancePlugin)
      compactMode: Boolean;
      constructor new(config: TFilterBarConfig);
      procedure hideFilterBar;
      procedure showFilterBar;
      procedure toggleFilterBar;
    end;

    TGridFeatureManager = class external name 'GridFeatureManager'
      class function getInstanceDefaultFeatures(instance: TJSObject): TJSObject;
      class function getInstanceFeatures(instance: TJSObject): TJSObject;
      class function getTypeNameDefaultFeatures: TJSObject; overload;
      class function getTypeNameDefaultFeatures(forType: String): TJSObject; overload;
      class function getTypeNameFeatures: TJSObject; overload;
      class function getTypeNameFeatures(forType: String): TJSObject; overload;
      class function isDefaultFeatureForInstance(featureClass: TInstancePlugin): Boolean; overload;
      class function isDefaultFeatureForInstance(featureClass: TInstancePlugin; forType: String): Boolean; overload;
      class function isDefaultFeatureForTypeName(featureClass: TInstancePlugin): Boolean; overload;
      class function isDefaultFeatureForTypeName(featureClass: TInstancePlugin; forType: String): Boolean; overload;
      class procedure registerFeature(featureClass: TFunction); overload;
      class procedure registerFeature(featureClass: TFunction; onByDefault: Boolean); overload;
      class procedure registerFeature(featureClass: TFunction; onByDefault: Boolean; forType: JSValue {String or array of String}); overload;
    end;

    TGroup = class external name 'Group'(TInstancePlugin)
      onToggleGroup: TFunction;
      constructor new(config: TGroupConfig);
      procedure collapseAll;
      procedure expandAll;
      procedure toggleCollapse(recordOrId: JSValue {TModel or String}; collapse: Boolean);
    end;

    TGroupSummary = class external name 'GroupSummary'(TInstancePlugin)
      constructor new(config: TGroupSummaryConfig);
      procedure refresh;
    end;

    THeaderMenu = class external name 'HeaderMenu'(TContextMenuBase)
      onHeaderMenuBeforeShow: TFunction;
      onHeaderMenuItem: TFunction;
      onHeaderMenuShow: TFunction;
      onHeaderMenuToggleItem: TFunction;
      constructor new(config: THeaderMenuConfig);
    end;

    TQuickFind = class external name 'QuickFind'(TInstancePlugin)
      found: array of TJSObject;
      foundCount: Double;
      constructor new(config: TQuickFindConfig);
      procedure clear;
      procedure gotoFirstHit;
      procedure gotoHit(index: Double);
      procedure gotoLastHit;
      procedure gotoNextHit;
      procedure gotoPrevHit;
      procedure search(find: String; columnFieldOrId: String);
    end;

    TRegionResize = class external name 'RegionResize'(TInstancePlugin)
      constructor new(config: TRegionResizeConfig);
    end;

    TRowCopyPaste = class external name 'RowCopyPaste'(TInstancePlugin)
      constructor new(config: TRowCopyPasteConfig);
      procedure copyRows; overload;
      procedure copyRows(isCut: Boolean); overload;
      procedure pasteRows; overload;
      procedure pasteRows(&record: TJSObject); overload;
    end;

    TRowReorder = class external name 'RowReorder'(TInstancePlugin)
      onGridRowAbort: TFunction;
      onGridRowBeforeDragStart: TFunction;
      onGridRowBeforeDropFinalize: TFunction;
      onGridRowDrag: TFunction;
      onGridRowDragStart: TFunction;
      onGridRowDrop: TFunction;
      constructor new(config: TRowReorderConfig);
    end;

    TSearch = class external name 'Search'(TInstancePlugin)
      foundCount: Double;
      isHitFocused: Boolean;
      constructor new(config: TSearchConfig);
      procedure clear;
      procedure gotoFirstHit;
      procedure gotoHit(index: Double);
      procedure gotoLastHit;
      procedure gotoNextHit;
      procedure gotoPrevHit;
      procedure search(find: String); overload;
      procedure search(find: String; gotoHit: Boolean); overload;
      procedure search(find: String; gotoHit: Boolean; reapply: Boolean); overload;
    end;

    TSort = class external name 'Sort'(TInstancePlugin)
      constructor new(config: TSortConfig);
    end;

    TStickyCells = class external name 'StickyCells'(TInstancePlugin)
      constructor new(config: TStickyCellsConfig);
    end;

    TStripe = class external name 'Stripe'(TInstancePlugin)
      constructor new(config: TStripeConfig);
    end;

    TSummary = class external name 'Summary'(TInstancePlugin)
      constructor new(config: TSummaryConfig);
      procedure refresh;
    end;

    TTree = class external name 'Tree'(TInstancePlugin)
      constructor new(config: TTreeConfig);
      function collapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function collapseAll: JSValue; async;
      function expand(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function expandAll: JSValue; async;
      function expandOrCollapseAll: JSValue; overload; async;
      function expandOrCollapseAll(collapse: Boolean): JSValue; overload; async;
      function expandOrCollapseAll(collapse: Boolean; topNode: TModel): JSValue; overload; async;
      function expandTo(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean; skipRefresh: Boolean): JSValue; overload; async;
    end;

    TExcelExporter = class external name 'ExcelExporter'(TInstancePlugin)
      constructor new(config: TExcelExporterConfig);
      procedure &export(config: TJSObject);
    end;

    TPdfExport = class external name 'PdfExport'(TInstancePlugin)
      currentExportPromise: JSValue;
      onBeforeExport: TFunction;
      onExport: TFunction;
      onExportStep: TFunction;
      constructor new(config: TPdfExportConfig);
      function &export(config: TJSObject): JSValue; async;
      function processExportContent(response: TResponse; config: TJSObject): JSValue; async;
      function receiveExportContent(pages: array of TJSObject; config: TJSObject): JSValue; async;
      function showExportDialog: JSValue; async;
    end;

    TExporter = class external name 'Exporter'
      localeManager: TLocaleManagerClass;
      stylesheets: array of String;
      onBeforeDestroy: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      constructor new(config: TExporterConfig);
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      function pageTpl(data: TJSObject): String;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      procedure updateLocalization;
    end;

    TRow = class external name 'Row'(TBase)
      bottom: Double;
      cells: array of THTMLElement;
      cls: JSValue {TDomClassList or TJSObject};
      dataIndex: Double;
      elements: array of THTMLElement;
      height: Double;
      id: JSValue {String or Double};
      index: Double;
      isFirst: Boolean;
      offsetHeight: Double;
      top: Double;
      constructor new(config: TRowConfig);
      procedure addCls(classes: JSValue {String or TJSObject or TDomClassList});
      procedure assignCls(classes: TJSObject);
      procedure eachCell(fn: TFunction);
      procedure eachElement(fn: TFunction);
      function getCell(columnId: JSValue {String or Double}): THTMLElement;
      function getCells(region: String): array of THTMLElement;
      function getElement(region: String): THTMLElement;
      procedure removeCls(classes: JSValue {String or TJSObject or TDomClassList});
    end;

    TTableExporter = class external name 'TableExporter'(TBase)
      constructor new(config: TTableExporterConfig);
      function &export(config: TJSObject): TJSObject;
    end;

    TGridBase = class external name 'GridBase'(TPanel)
      bodyHeight: Double;
      columnLines: Boolean;
      columns: TColumnStore;
      data: array of TJSObject;
      features: TJSObject;
      firstVisibleRow: TRow;
      headerHeight: Double;
      lastVisibleRow: TRow;
      plugins: TJSObject;
      readOnly: Boolean;
      responsiveLevel: String;
      rowHeight: Double;
      scrollManager: TScrollManager;
      selectedCell: TJSObject;
      selectedCellCSSSelector: String;
      selectedRecord: TModel;
      selectedRecords: JSValue {array of TModel or array of Double};
      state: TJSObject;
      store: TStore {TStore or TJSObject or TStoreConfig};
      subGrids: TJSObject;
      transitionDuration: Double;
      onBeforeRenderRows: TFunction;
      onBeforeToggleNode: TFunction;
      onCellClick: TFunction;
      onCellContextMenu: TFunction;
      onCellDblClick: TFunction;
      onCellMouseOut: TFunction;
      onCellMouseOver: TFunction;
      onCollapseNode: TFunction;
      onExpandNode: TFunction;
      onMouseOut: TFunction;
      onMouseOver: TFunction;
      onRenderRows: TFunction;
      onResponsive: TFunction;
      onScroll: TFunction;
      onSelectionChange: TFunction;
      onToggleNode: TFunction;
      constructor new(config: TGridBaseConfig);
      procedure addPlugins(plugins: array of TFunction);
      function collapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      procedure collapseAll;
      procedure deselectAll; overload;
      procedure deselectAll(removeCurrentRecordsOnly: Boolean); overload;
      function deselectCell(cellSelector: TJSObject): TJSObject;
      procedure deselectRow(recordOrId: JSValue {TModel or String or Double});
      procedure deselectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double});
      procedure disableScrollingCloseToEdges(subGrid: JSValue {TSubGrid or String});
      procedure enableScrollingCloseToEdges(subGrid: JSValue {TSubGrid or String});
      function expand(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      procedure expandAll;
      function expandTo(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function getCell(cellContext: TJSObject): THTMLElement;
      function getColumnFromElement(element: THTMLElement): TColumn;
      function getHeaderElement(columnId: JSValue {String or Double or TColumn}): THTMLElement;
      function getPlugin(pluginClassOrName: JSValue {String or TFunction}): TJSObject;
      function getRecordFromElement(element: THTMLElement): TModel;
      function getSubGrid(region: String): TSubGrid;
      function getSubGridFromColumn(column: JSValue {String or TColumn}): TSubGrid;
      function hasFeature(name: String): Boolean;
      function hasPlugin(pluginClassOrName: JSValue {String or TFunction}): Boolean;
      function isSelectable(recordCellOrId: JSValue {TModel or TJSObject or String or Double or TModelConfig}): Boolean;
      function isSelected(cellSelectorOrId: JSValue {TJSObject or String or Double or TModel or TModelConfig}): Boolean;
      function maskBody(loadMask: String): TMask;
      procedure refreshColumn(column: TColumn);
      procedure refreshRows;
      procedure renderContents;
      procedure renderRows;
      procedure restoreScroll; overload;
      procedure restoreScroll(state: TJSObject); overload;
      procedure scrollCellIntoView(cellContext: TJSObject);
      function scrollColumnIntoView(column: JSValue {TColumn or String or Double}): JSValue; overload; async;
      function scrollColumnIntoView(column: JSValue {TColumn or String or Double}; options: TJSObject): JSValue; overload; async;
      function scrollRowIntoView(recordOrId: JSValue {TModel or String or Double}): JSValue; overload; async;
      function scrollRowIntoView(recordOrId: JSValue {TModel or String or Double}; options: TJSObject): JSValue; overload; async;
      function scrollToBottom: JSValue; async;
      function scrollToTop: JSValue; async;
      procedure selectAll;
      function selectCell(cellSelector: TJSObject): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean; addToSelection: Boolean): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean; addToSelection: Boolean; silent: Boolean): TJSObject; overload;
      procedure selectRange(fromId: JSValue {String or Double}; toId: JSValue {String or Double});
      procedure selectRow(options: JSValue {TJSObject or TModel or TModelConfig});
      procedure selectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double}); overload;
      procedure selectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double}; addToSelection: Boolean); overload;
      procedure spliceSelectedRecords(index: Double; toRemove: JSValue {array of TJSObject or Double}; toAdd: JSValue {array of TJSObject or TJSObject});
      function startEditing(cellContext: TJSObject): Boolean;
      function storeScroll: TJSObject;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean; skipRefresh: Boolean): JSValue; overload; async;
      procedure unmaskBody;
    end;

    TGrid = class external name 'Grid'(TGridBase)
      localeManager: TLocaleManagerClass;
      onBeforeCellEditStart: TFunction;
      onBeforeDestroy: TFunction;
      onBeforeFinishCellEdit: TFunction;
      onCancelCellEdit: TFunction;
      onCatchAll: TFunction;
      onDestroy: TFunction;
      onFinishCellEdit: TFunction;
      onStartCellEdit: TFunction;
      constructor new; overload;
      constructor new(config: TGridConfig); overload;
      class function optionalL(text: String): String; overload;
      class function optionalL(text: String; templateData: TJSObject): String; overload;
      function L(text: String): String; overload;
      function L(text: String; templateData: TJSObject): String; overload;
      function addListener(config: JSValue {TJSObject or String}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function addListener(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure collapseAll;
      procedure expandAll;
      function hasListener(eventName: String): Boolean;
      function on(config: JSValue {TJSObject or String}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}): TFunction; overload;
      function on(config: JSValue {TJSObject or String}; thisObj: JSValue {TJSObject or TFunction}; oldThisObj: TJSObject): TFunction; overload;
      procedure relayAll(through: TEvents; prefix: String); overload;
      procedure relayAll(through: TEvents; prefix: String; transformCase: Boolean); overload;
      procedure removeAllListeners;
      procedure removeListener(config: TJSObject; thisObj: TJSObject);
      procedure resumeEvents;
      procedure showContextMenu(event: TEvent); overload;
      procedure showContextMenu(event: TEvent; alignSpec: JSValue {TJSObject or THTMLElement}); overload;
      function startEditing(cellContext: TJSObject): Boolean;
      procedure suspendEvents; overload;
      procedure suspendEvents(queue: Boolean); overload;
      function trigger(eventName: String): JSValue {Boolean or JSValue}; overload;
      function trigger(eventName: String; param: TJSObject): JSValue {Boolean or JSValue}; overload;
      procedure un(config: TJSObject); overload;
      procedure un(config: TJSObject; thisObj: TJSObject); overload;
      procedure updateLocalization;
    end;

    TSubGrid = class external name 'SubGrid'(TWidget)
      collapsed: Boolean;
      flex: JSValue {Double or String};
      rowElements: array of THTMLElement;
      viewRectangle: TRectangle;
      width: Double;
      constructor new(config: TSubGridConfig);
      function collapse: JSValue; async;
      function expand: JSValue; async;
      procedure resizeColumnsToFitContent;
      function scrollColumnIntoView(column: JSValue {TColumn or String or Double}): JSValue; overload; async;
      function scrollColumnIntoView(column: JSValue {TColumn or String or Double}; options: TJSObject): JSValue; overload; async;
    end;

    TTreeGrid = class external name 'TreeGrid'(TGrid)
      constructor new(config: TTreeGridConfig);
      function collapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function expand(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function expandTo(idOrRecord: JSValue {String or Double or TModel}): JSValue; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean): JSValue; overload; async;
      function toggleCollapse(idOrRecord: JSValue {String or Double or TModel}; collapse: Boolean; skipRefresh: Boolean): JSValue; overload; async;
    end;

    TExportDialog = class external name 'ExportDialog'(TPopup)
      onCancel: TFunction;
      onExport: TFunction;
      constructor new(config: TExportDialogConfig);
    end;

    TGridElementEvents = class external name 'GridElementEvents'
      onCellClick: TFunction;
      onCellContextMenu: TFunction;
      onCellDblClick: TFunction;
      onCellMouseOut: TFunction;
      onCellMouseOver: TFunction;
      onMouseOut: TFunction;
      onMouseOver: TFunction;
      constructor new(config: TGridElementEventsConfig);
    end;

    TGridFeatures = class external name 'GridFeatures'
      features: TJSObject;
      constructor new(config: TGridFeaturesConfig);
      function hasFeature(name: String): Boolean;
    end;

    TGridResponsive = class external name 'GridResponsive'
      responsiveLevel: String;
      onResponsive: TFunction;
      constructor new(config: TGridResponsiveConfig);
    end;

    TGridSelection = class external name 'GridSelection'
      selectedCell: TJSObject;
      selectedCellCSSSelector: String;
      selectedRecord: TModel;
      selectedRecords: JSValue {array of TModel or array of Double};
      onSelectionChange: TFunction;
      constructor new(config: TGridSelectionConfig);
      procedure deselectAll; overload;
      procedure deselectAll(removeCurrentRecordsOnly: Boolean); overload;
      function deselectCell(cellSelector: TJSObject): TJSObject;
      procedure deselectRow(recordOrId: JSValue {TModel or String or Double});
      procedure deselectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double});
      function isSelectable(recordCellOrId: JSValue {TModel or TJSObject or String or Double or TModelConfig}): Boolean;
      function isSelected(cellSelectorOrId: JSValue {TJSObject or String or Double or TModel or TModelConfig}): Boolean;
      procedure selectAll;
      function selectCell(cellSelector: TJSObject): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean; addToSelection: Boolean): TJSObject; overload;
      function selectCell(cellSelector: TJSObject; scrollIntoView: Boolean; addToSelection: Boolean; silent: Boolean): TJSObject; overload;
      procedure selectRange(fromId: JSValue {String or Double}; toId: JSValue {String or Double});
      procedure selectRow(options: JSValue {TJSObject or TModel or TModelConfig});
      procedure selectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double}); overload;
      procedure selectRows(recordOrIds: JSValue {TModel or String or Double or array of TModel or array of String or array of Double}; addToSelection: Boolean); overload;
      procedure spliceSelectedRecords(index: Double; toRemove: JSValue {array of TJSObject or Double}; toAdd: JSValue {array of TJSObject or TJSObject});
    end;

    TGridState = class external name 'GridState'
      state: TJSObject;
    end;

    TGridSubGrids = class external name 'GridSubGrids'
      subGrids: TJSObject;
      function getSubGrid(region: String): TSubGrid;
      function getSubGridFromColumn(column: JSValue {String or TColumn}): TSubGrid;
    end;
  end;

  TDomConfig = class external name 'Object' (TJSObject)
    tag: String;
    &class: JSValue {String or TJSObject};
    className: JSValue {String or TJSObject};
    style: JSValue {String or TJSObject};
    dataset: TJSObject;
    children: JSValue {array of TDomConfig or TDomConfig or String};
    html: String;
  end;

  TPanelHeader = class
    cls: JSValue {String or TJSObject};
    dock: String;
    title: String;
    titleAlign: String;
  end;

  TBreakpoint = class
    name: String;
    configs: TJSObject;
    callback: TFunction;
  end;

  TWidgetTagConfig = class external name 'Object' (TJSObject)
    faPath: String;
    stylesheet: String;
  end;

  TAjaxStoreConfig = class external name 'Object' (TJSObject)
    allowNoId: Boolean;
    autoCommit: Boolean;
    autoLoad: Boolean;
    autoTree: Boolean;
    bubbleEvents: TJSObject;
    chainedFields: array of String;
    chainedFilterFn: TFunction;
    createUrl: String;
    data: JSValue {array of TJSObject or array of TModel or array of TModelConfig};
    deleteUrl: String;
    doRelayToMaster: array of String;
    dontRelayToMaster: String;
    fetchOptions: TJSObject;
    fields: JSValue {array of String or array of TJSObject or array of TDataField or array of TDataFieldConfig};
    filterParamName: String;
    filters: JSValue {TJSObject or array of TJSObject};
    groupers: array of TJSObject;
    headers: TJSObject;
    httpMethods: TJSObject;
    id: JSValue {String or Double};
    keepUncommittedChanges: Boolean;
    listeners: TJSObject;
    masterStore: TBryntum.TStore;
    modelClass: TBryntum.TModelClass;
    pageParamName: String;
    pageSize: Double;
    pageSizeParamName: String;
    pageStartParamName: String;
    params: TJSObject;
    parentIdParamName: String;
    readUrl: String;
    reapplyFilterOnAdd: Boolean;
    reapplyFilterOnUpdate: Boolean;
    reapplySortersOnAdd: Boolean;
    responseDataProperty: String;
    responseSuccessProperty: String;
    responseTotalProperty: String;
    restfulFilter: Boolean;
    sendAsFormData: Boolean;
    sortParamName: String;
    sorters: JSValue {array of TJSObject or array of String};
    stm: TBryntum.TStateTrackingManager;
    storage: JSValue {TCollection or TJSObject or TCollectionConfig};
    syncDataOnLoad: JSValue {Boolean or TJSObject};
    transformFlatData: Boolean;
    tree: Boolean;
    updateUrl: String;
    useLocaleSort: JSValue {Boolean or String or TJSObject};
    useRawData: JSValue {Boolean or TJSObject};
    useRestfulMethods: Boolean;
    writeAllFields: Boolean;
    onAfterRequest: TFunction;
    onBeforeLoad: TFunction;
    onBeforeLoadChildren: TFunction;
    onBeforeLoadPage: TFunction;
    onBeforeRequest: TFunction;
    onCommitAdded: TFunction;
    onCommitModified: TFunction;
    onCommitRemoved: TFunction;
    onException: TFunction;
    onLoad: TFunction;
    onLoadChildren: TFunction;
    onLoadChildrenStart: TFunction;
    onLoadStart: TFunction;
  end;

  TModelConfig = class external name 'Object' (TJSObject)
    children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
    id: JSValue {String or Double};
    parentId: JSValue {String or Double or };
    parentIndex: Double;
  end;

  TStoreConfig = class external name 'Object' (TJSObject)
    allowNoId: Boolean;
    autoCommit: Boolean;
    autoTree: Boolean;
    bubbleEvents: TJSObject;
    chainedFields: array of String;
    chainedFilterFn: TFunction;
    data: JSValue {array of TJSObject or array of TModel or array of TModelConfig};
    doRelayToMaster: array of String;
    dontRelayToMaster: String;
    fields: JSValue {array of String or array of TJSObject or array of TDataField or array of TDataFieldConfig};
    filters: JSValue {TJSObject or array of TJSObject};
    groupers: array of TJSObject;
    id: JSValue {String or Double};
    keepUncommittedChanges: Boolean;
    listeners: TJSObject;
    masterStore: TBryntum.TStore;
    modelClass: TBryntum.TModelClass;
    reapplyFilterOnAdd: Boolean;
    reapplyFilterOnUpdate: Boolean;
    reapplySortersOnAdd: Boolean;
    sorters: JSValue {array of TJSObject or array of String};
    stm: TBryntum.TStateTrackingManager;
    storage: JSValue {TCollection or TJSObject or TCollectionConfig};
    syncDataOnLoad: JSValue {Boolean or TJSObject};
    transformFlatData: Boolean;
    tree: Boolean;
    useLocaleSort: JSValue {Boolean or String or TJSObject};
    useRawData: JSValue {Boolean or TJSObject};
    onAdd: TFunction;
    onAddConfirmed: TFunction;
    onBeforeAdd: TFunction;
    onBeforeCommit: TFunction;
    onBeforeDestroy: TFunction;
    onBeforeRemove: TFunction;
    onBeforeSort: TFunction;
    onBeforeUpdate: TFunction;
    onCatchAll: TFunction;
    onChange: TFunction;
    onCommit: TFunction;
    onDestroy: TFunction;
    onFilter: TFunction;
    onGroup: TFunction;
    onIdChange: TFunction;
    onMove: TFunction;
    onRefresh: TFunction;
    onRemove: TFunction;
    onRemoveAll: TFunction;
    onRootChange: TFunction;
    onSort: TFunction;
    onUpdate: TFunction;
  end;

  TDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    defaultValue: JSValue;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: JSValue;
    nullable: Boolean;
    persist: Boolean;
    readOnly: Boolean;
  end;

  TBooleanDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    defaultValue: JSValue;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: Boolean;
    nullable: Boolean;
    persist: Boolean;
    readOnly: Boolean;
  end;

  TDateDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    dateFormat: String;
    defaultValue: JSValue;
    format: String;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: JSValue;
    nullable: Boolean;
    persist: Boolean;
    readOnly: Boolean;
  end;

  TIntegerDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    defaultValue: JSValue;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: Double;
    nullable: Boolean;
    persist: Boolean;
    readOnly: Boolean;
    rounding: String;
  end;

  TNumberDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    defaultValue: JSValue;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: Double;
    nullable: Boolean;
    persist: Boolean;
    precision: Double;
    readOnly: Boolean;
  end;

  TStringDataFieldConfig = class external name 'Object' (TJSObject)
    alwaysWrite: Boolean;
    column: JSValue {String or TJSObject};
    compare: TFunction;
    dataSource: String;
    defaultValue: JSValue;
    internal: Boolean;
    &label: String;
    name: String;
    nullText: String;
    nullValue: String;
    nullable: Boolean;
    persist: Boolean;
    readOnly: Boolean;
  end;

  TStoreCRUDConfig = class external name 'Object' (TJSObject)
    autoCommit: Boolean;
    onAdd: TFunction;
    onBeforeAdd: TFunction;
    onBeforeCommit: TFunction;
    onBeforeRemove: TFunction;
    onCommit: TFunction;
    onRemove: TFunction;
    onRemoveAll: TFunction;
  end;

  TStoreChainedConfig = class external name 'Object' (TJSObject)
    chainedFields: array of String;
    chainedFilterFn: TFunction;
    doRelayToMaster: array of String;
    dontRelayToMaster: String;
    keepUncommittedChanges: Boolean;
    masterStore: TBryntum.TStore;
  end;

  TStoreFilterConfig = class external name 'Object' (TJSObject)
    filters: JSValue {TJSObject or array of TJSObject};
    reapplyFilterOnAdd: Boolean;
    reapplyFilterOnUpdate: Boolean;
    onFilter: TFunction;
  end;

  TStoreGroupConfig = class external name 'Object' (TJSObject)
    groupers: array of TJSObject;
    onGroup: TFunction;
  end;

  TStoreProxyConfig = class external name 'Object' (TJSObject)
    objectify: Boolean;
  end;

  TStoreSortConfig = class external name 'Object' (TJSObject)
    reapplySortersOnAdd: Boolean;
    sorters: JSValue {array of TJSObject or array of String};
    useLocaleSort: JSValue {Boolean or String or TJSObject};
    onBeforeSort: TFunction;
    onSort: TFunction;
  end;

  TStoreSyncConfig = class external name 'Object' (TJSObject)
    syncDataOnLoad: JSValue {Boolean or TJSObject};
  end;

  TStoreTreeConfig = class external name 'Object' (TJSObject)
    transformFlatData: Boolean;
  end;

  TTreeNodeConfig = class external name 'Object' (TJSObject)
    children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
    parentId: JSValue {String or Double or };
    parentIndex: Double;
  end;

  TStateTrackingManagerConfig = class external name 'Object' (TJSObject)
    autoRecord: Boolean;
    autoRecordTransactionStopTimeout: Double;
    bubbleEvents: TJSObject;
    disabled: Boolean;
    getTransactionTitle: TFunction;
    listeners: TJSObject;
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onDisabled: TFunction;
    onQueueReset: TFunction;
    onRecordingStart: TFunction;
    onRecordingStop: TFunction;
    onRestoringStart: TFunction;
    onRestoringStop: TFunction;
  end;

  TTransactionConfig = class external name 'Object' (TJSObject)
    title: String;
  end;

  TStoreStmConfig = class external name 'Object' (TJSObject)
    stm: TBryntum.TStateTrackingManager;
  end;

  TInstancePluginConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onDisable: TFunction;
    onEnable: TFunction;
  end;

  TContextMenuBaseConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    items: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    menu: TJSObject;
    menuConfig: TJSObject;
    triggerEvent: String;
    &type: String;
    onContextMenuItem: TFunction;
    onContextMenuToggleItem: TFunction;
  end;

  TDragHelperConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    cloneTarget: Boolean;
    constrain: Boolean;
    containers: array of THTMLElement;
    dragThreshold: Double;
    dragWithin: THTMLElement;
    dropTargetSelector: String;
    hideOriginalElement: Boolean;
    ignoreSelector: String;
    invalidCls: String;
    isElementDraggable: TFunction;
    listeners: TJSObject;
    lockX: Boolean;
    lockY: Boolean;
    maxX: Double;
    maxY: Double;
    minX: Double;
    minY: Double;
    mode: String;
    outerElement: THTMLElement;
    scrollManager: TBryntum.TScrollManager;
    targetSelector: String;
    touchStartDelay: Double;
    onBeforeDestroy: TFunction;
    onBeforeDragStart: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onDrag: TFunction;
    onDragStart: TFunction;
    onDrop: TFunction;
  end;

  TNumberFormatConfig = class external name 'Object' (TJSObject)
    fraction: JSValue {Double or array of Double};
    integer: Double;
    significant: JSValue {Double or array of Double};
    template: String;
  end;

  TScrollerConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    element: THTMLElement;
    listeners: TJSObject;
    overflowX: JSValue {String or Boolean};
    overflowY: JSValue {String or Boolean};
    translate: Boolean;
    widget: THTMLElement;
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onScroll: TFunction;
    onScrollend: TFunction;
  end;

  TLocalizableConfig = class external name 'Object' (TJSObject)
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TEventsConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    listeners: TJSObject;
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
  end;

  TLoadMaskableConfig = class external name 'Object' (TJSObject)
    loadMask: JSValue {String or TJSObject or };
    loadMaskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    loadMaskError: JSValue {TJSObject or TMask or TMaskConfig};
    syncMask: JSValue {String or TJSObject or };
  end;

  TPluggableConfig = class external name 'Object' (TJSObject)
    plugins: array of TFunction;
  end;

  TClickRepeaterConfig = class external name 'Object' (TJSObject)
    accelerateDuration: Double;
    delay: Double;
    delegate: String;
    element: THTMLElement;
    endRate: Double;
    startRate: Double;
  end;

  TCollectionConfig = class external name 'Object' (TJSObject)
    autoFilter: Boolean;
    autoSort: Boolean;
    extraKeys: JSValue {array of String or array of TJSObject};
    idProperty: String;
    sorters: array of TJSObject;
    onChange: TFunction;
    onNoChange: TFunction;
  end;

  TCollectionFilterConfig = class external name 'Object' (TJSObject)
    caseSensitive: Boolean;
    convert: TFunction;
    filterBy: TFunction;
    id: String;
    operator: String;
    &property: String;
    value: JSValue;
  end;

  TCollectionSorterConfig = class external name 'Object' (TJSObject)
    convert: TFunction;
    direction: String;
    id: String;
    &property: String;
    sortFn: TFunction;
    useLocaleSort: JSValue {Boolean or String or TJSObject};
  end;

  TMonthConfig = class external name 'Object' (TJSObject)
    date: JSValue {TDate or String};
    hideNonWorkingDays: Boolean;
    nonWorkingDays: TJSObject;
    sixWeeks: Boolean;
    weekStartDay: Double;
    onDateChange: TFunction;
    onMonthChange: TFunction;
    onWeekChange: TFunction;
    onYearChange: TFunction;
  end;

  TScrollManagerConfig = class external name 'Object' (TJSObject)
    direction: String;
    element: THTMLElement;
    scrollSpeed: Double;
    startScrollDelay: Double;
    stopScrollWhenPointerOut: Boolean;
    zoneWidth: Double;
  end;

  TButtonConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: THTMLElement;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    color: String;
    constrainTo: JSValue {THTMLElement or TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    href: String;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    icon: String;
    iconAlign: String;
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    menu: JSValue {TJSObject or array of TJSObject or TWidget or TWidgetConfig or array of TWidgetConfig};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    pressed: Boolean;
    pressedIcon: String;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    target: String;
    text: String;
    textAlign: String;
    title: String;
    toggleGroup: String;
    toggleable: Boolean;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onClick: TFunction;
    onToggle: TFunction;
  end;

  TWidgetConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeDestroy: TFunction;
    onBeforeHide: TFunction;
    onBeforeShow: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onFocusIn: TFunction;
    onFocusOut: TFunction;
    onHide: TFunction;
    onPaint: TFunction;
    onReadOnly: TFunction;
    onResize: TFunction;
    onShow: TFunction;
  end;

  TButtonGroupConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: String;
    color: String;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {array of TJSObject or array of TButton or array of TButtonConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    toggleGroup: Boolean;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onClick: TFunction;
    onToggle: TFunction;
  end;

  TCalendarPanelConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    cellRenderer: JSValue {TFunction or String};
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    date: JSValue {TDate or String};
    dayNameFormat: String;
    defaultBindProperty: String;
    defaults: TJSObject;
    disableWeekends: Boolean;
    disabled: Boolean;
    disabledDates: JSValue {TFunction or array of TDate or String};
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    footer: JSValue {TJSObject or String};
    header: JSValue {String or TPanelHeader};
    headerRenderer: JSValue {TFunction or String};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minColumnWidth: Double;
    minHeight: JSValue {String or Double};
    minRowHeight: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    month: JSValue {TMonth or TJSObject or TMonthConfig};
    namedItems: TJSObject;
    nonWorkingDays: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showWeekColumn: Boolean;
    showWeekNumber: Boolean;
    sixWeeks: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    tip: TJSObject;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weekRenderer: JSValue {TFunction or String};
    weekStartDay: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onDateChange: TFunction;
    onRefresh: TFunction;
  end;

  TCheckboxConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    checked: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    color: String;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    text: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onBeforeChange: TFunction;
    onChange: TFunction;
  end;

  TChipViewConfig = class external name 'Object' (TJSObject)
    activateOnMouseover: Boolean;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    allowGroupSelect: Boolean;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    closable: Boolean;
    closeHandler: JSValue {String or TFunction};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    groupHeaderTpl: TFunction;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    iconTpl: TFunction;
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemTpl: TFunction;
    items: array of TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    multiSelect: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    selectAllItem: JSValue {Boolean or String};
    selected: JSValue {TCollection or TJSObject or TCollectionConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    store: JSValue {TJSObject or TBryntum.TStore or TStoreConfig};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    toggleAllIfCtrlPressed: Boolean;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TComboConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoComplete: String;
    autoExpand: Boolean;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    caseSensitive: Boolean;
    centered: Boolean;
    chipView: TJSObject;
    clearTextOnPickerHide: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    displayField: String;
    displayValueRenderer: TFunction;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    emptyText: String;
    encodeFilterParams: TFunction;
    filterOnEnter: Boolean;
    filterOperator: String;
    filterParamName: String;
    filterSelected: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hidePickerOnSelect: Boolean;
    hideTrigger: Boolean;
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    items: JSValue {array of TJSObject or array of String or TJSObject};
    keyStrokeChangeDelay: Double;
    keyStrokeFilterDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listCls: String;
    listItemTpl: TFunction;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    minChars: Double;
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    multiSelect: Boolean;
    name: String;
    overlayAnchor: Boolean;
    owner: TBryntum.TWidget;
    picker: TJSObject;
    pickerAlignElement: String;
    pickerWidth: Double;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    primaryFilter: TJSObject;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    store: TBryntum.TStore;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggerAction: String;
    triggers: TJSObject;
    validateFilter: Boolean;
    value: JSValue {String or array of Double or array of String};
    valueField: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onInput: TFunction;
    onSelect: TFunction;
  end;

  TContainerConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeSetRecord: TFunction;
  end;

  TDateFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoComplete: String;
    autoExpand: Boolean;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    format: String;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keepTime: JSValue {Boolean or TDate or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    max: JSValue {String or TDate};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    min: JSValue {String or TDate};
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    picker: TJSObject;
    pickerAlignElement: String;
    pickerFormat: String;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    step: JSValue {String or Double or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: JSValue {String or TDate};
    weekStartDay: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TDatePickerConfig = class external name 'Object' (TJSObject)
    activeDate: TDate;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    cellRenderer: JSValue {TFunction or String};
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    date: TDate;
    dayNameFormat: String;
    defaultBindProperty: String;
    defaults: TJSObject;
    disableWeekends: Boolean;
    disabled: Boolean;
    disabledDates: JSValue {TFunction or array of TDate or String};
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editMonth: Boolean;
    editOnHover: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    focusDisabledDates: Boolean;
    footer: JSValue {TJSObject or String};
    header: JSValue {String or TPanelHeader};
    headerRenderer: JSValue {TFunction or String};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxDate: TDate;
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minColumnWidth: Double;
    minDate: TDate;
    minHeight: JSValue {String or Double};
    minRowHeight: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    month: JSValue {TMonth or TJSObject or TMonthConfig};
    multiSelect: Boolean;
    namedItems: TJSObject;
    nonWorkingDays: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showWeekColumn: Boolean;
    showWeekNumber: Boolean;
    sixWeeks: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    tip: TJSObject;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weekRenderer: JSValue {TFunction or String};
    weekStartDay: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onSelectionChange: TFunction;
  end;

  TDateTimeFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    dateField: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    timeField: TJSObject;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weekStartDay: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TDisplayFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    template: TFunction;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TDurationFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    allowNegative: Boolean;
    allowedUnits: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    decimalPrecision: Double;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    magnitude: Double;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    max: String;
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    min: String;
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    step: Double;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    &unit: String;
    useAbbreviation: Boolean;
    value: JSValue {TJSObject or String};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onChange: TFunction;
  end;

  TEditorConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    blurAction: String;
    bubbleEvents: TJSObject;
    cancelKey: String;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    completeKey: String;
    completeOnChange: Boolean;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputField: JSValue {TJSObject or String};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    invalidAction: String;
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeCancel: TFunction;
    onBeforeComplete: TFunction;
    onBeforeStart: TFunction;
    onCancel: TFunction;
    onComplete: TFunction;
    onKeypress: TFunction;
    onStart: TFunction;
  end;

  TFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onAction: TFunction;
    onChange: TFunction;
    onClear: TFunction;
    onInput: TFunction;
    onTrigger: TFunction;
  end;

  TFileFieldConfig = class external name 'Object' (TJSObject)
    accept: String;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    multiple: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TFilePickerConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    buttonConfig: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    fileFieldConfig: TJSObject;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onChange: TFunction;
    onClear: TFunction;
  end;

  TFilterFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    field: String;
    filterFunction: TFunction;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    store: TBryntum.TStore;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TListConfig = class external name 'Object' (TJSObject)
    activateOnMouseover: Boolean;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    allowGroupSelect: Boolean;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    groupHeaderTpl: TFunction;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemTpl: TFunction;
    items: array of TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    multiSelect: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    selectAllItem: JSValue {Boolean or String};
    selected: JSValue {TCollection or TJSObject or TCollectionConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    store: JSValue {TJSObject or TBryntum.TStore or TStoreConfig};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    toggleAllIfCtrlPressed: Boolean;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onItem: TFunction;
  end;

  TMaskConfig = class external name 'Object' (TJSObject)
    icon: String;
    mode: String;
    owner: JSValue {TJSObject or TBryntum.TWidget or TWidgetConfig};
    showDelay: Double;
    target: JSValue {String or THTMLElement};
    text: String;
  end;

  TMenuConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoShow: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    closable: Boolean;
    closeAction: String;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    focusOnHover: Boolean;
    focusOnToFront: Boolean;
    footer: JSValue {TJSObject or String};
    forElement: THTMLElement;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    maximizable: Boolean;
    maximized: Boolean;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    modal: Boolean;
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showOnClick: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onItem: TFunction;
    onToggle: TFunction;
  end;

  TMenuItemConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    checked: Boolean;
    closeParent: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    href: String;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    icon: String;
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    menu: JSValue {TJSObject or array of TJSObject};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    target: String;
    text: String;
    textAlign: String;
    title: String;
    toggleGroup: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onItem: TFunction;
    onToggle: TFunction;
  end;

  TNumberFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    changeOnSpin: JSValue {Boolean or Double};
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    decimalPrecision: Double;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    format: JSValue {String or TJSObject or TNumberFormat or TNumberFormatConfig};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputType: String;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    largeStep: Double;
    leadingZeroes: Double;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    max: Double;
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    min: Double;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    step: Double;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TPagingToolbarConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    overflow: JSValue {String or TJSObject or };
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    store: TBryntum.TAjaxStore;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    widgetCls: String;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TPanelConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    footer: JSValue {TJSObject or String};
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onToolClick: TFunction;
  end;

  TPickerFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoComplete: String;
    autoExpand: Boolean;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    picker: TJSObject;
    pickerAlignElement: String;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TPopupConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoShow: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    closable: Boolean;
    closeAction: String;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    focusOnToFront: Boolean;
    footer: JSValue {TJSObject or String};
    forElement: THTMLElement;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    maximizable: Boolean;
    maximized: Boolean;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    modal: Boolean;
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showOnClick: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeClose: TFunction;
  end;

  TSlideToggleConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    checked: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    color: String;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    text: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TSliderConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    max: Double;
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    min: Double;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showTooltip: Boolean;
    showValue: Boolean;
    step: Double;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    text: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    value: Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onChange: TFunction;
    onInput: TFunction;
  end;

  TSplitterConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    orientation: String;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTabConfig = class external name 'Object' (TJSObject)
    active: Boolean;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    color: String;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    href: String;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    icon: String;
    iconAlign: String;
    id: String;
    index: Double;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    isFirst: Boolean;
    isLast: Boolean;
    item: TBryntum.TWidget;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    menu: JSValue {TJSObject or array of TJSObject or TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    pressed: Boolean;
    pressedIcon: String;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabPanel: TBryntum.TTabPanel;
    tag: String;
    target: String;
    text: String;
    textAlign: String;
    title: String;
    titleProperty: String;
    titleSource: String;
    toggleGroup: String;
    toggleable: Boolean;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTabBarConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    overflow: JSValue {String or TJSObject or };
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    widgetCls: String;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTabPanelConfig = class external name 'Object' (TJSObject)
    activeTab: Double;
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    animateTabChange: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoHeight: Boolean;
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabMaxWidth: Double;
    tabMinWidth: Double;
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onTabChange: TFunction;
  end;

  TTextAreaFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    &inline: Boolean;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    resize: String;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTextFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoComplete: String;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: String;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTimeFieldConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoComplete: String;
    autoExpand: Boolean;
    autoSelect: Boolean;
    badge: String;
    bubbleEvents: TJSObject;
    centered: Boolean;
    clearable: JSValue {Boolean or TJSObject};
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    editable: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    format: String;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    highlightExternalChange: Boolean;
    hint: JSValue {String or TFunction};
    hintHtml: JSValue {String or TFunction};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    inputAlign: String;
    inputAttributes: TJSObject;
    inputWidth: JSValue {String or Double};
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    keyStrokeChangeDelay: Double;
    &label: String;
    labelCls: JSValue {String or TJSObject};
    labelPosition: String;
    labelWidth: JSValue {String or Double};
    labels: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    max: JSValue {String or TDate};
    maxHeight: JSValue {String or Double};
    maxLength: Double;
    maxWidth: JSValue {String or Double};
    min: JSValue {String or TDate};
    minHeight: JSValue {String or Double};
    minLength: Double;
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    name: String;
    owner: TBryntum.TWidget;
    picker: TJSObject;
    pickerAlignElement: String;
    placeholder: String;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    required: Boolean;
    revertOnEscape: Boolean;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    step: String;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tabIndex: Double;
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    triggers: TJSObject;
    value: JSValue {String or TDate};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TToastConfig = class external name 'Object' (TJSObject)
    color: String;
    showProgress: Boolean;
    timeout: Double;
  end;

  TToolConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: String;
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    handler: TFunction;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    &repeat: TJSObject;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TToolbarConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    overflow: JSValue {String or TJSObject or };
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    widgetCls: String;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTooltipConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    allowOver: Boolean;
    anchor: Boolean;
    anchorToTarget: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoShow: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    closable: Boolean;
    closeAction: String;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dismissDelay: Double;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    focusOnToFront: Boolean;
    footer: JSValue {TJSObject or String};
    forElement: THTMLElement;
    forSelector: String;
    getHtml: TFunction;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideDelay: Double;
    hideOnDelegateChange: Boolean;
    hideWhenEmpty: Boolean;
    hoverDelay: Double;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    loadingMsg: String;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    maximizable: Boolean;
    maximized: Boolean;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    modal: Boolean;
    monitorResize: Boolean;
    mouseOffsetX: Double;
    mouseOffsetY: Double;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showOnClick: Boolean;
    showOnHover: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeShow: TFunction;
    onPointerOver: TFunction;
  end;

  TUndoRedoBaseConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    color: String;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showZeroActionBadge: Boolean;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    text: Boolean;
    textAlign: String;
    textContent: Boolean;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  THistogramConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    data: array of TJSObject;
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    getBarText: TFunction;
    getBarTip: TFunction;
    getRectClass: TFunction;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    omitZeroHeightBars: Double;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    series: array of TJSObject;
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    topValue: Double;
    values: array of Double;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TScaleConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: String;
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    horizontal: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TLayoutConfig = class external name 'Object' (TJSObject)
    containerCls: String;
    itemCls: String;
  end;

  TBadgeConfig = class external name 'Object' (TJSObject)
    badge: String;
  end;

  TResponsiveConfig = class external name 'Object' (TJSObject)
    breakpoints: TJSObject;
    onResponsiveHeightChange: TFunction;
    onResponsiveWidthChange: TFunction;
  end;

  TStyleableConfig = class external name 'Object' (TJSObject)
    css: TJSObject;
    cssVarPrefix: String;
  end;

  TColumnConfig = class external name 'Object' (TJSObject)
    align: String;
    autoHeight: Boolean;
    autoSyncHtml: Boolean;
    autoWidth: JSValue {Boolean or Double or array of Double};
    bubbleEvents: TJSObject;
    cellCls: String;
    cellMenuItems: TJSObject;
    children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
    cls: String;
    draggable: Boolean;
    editTargetSelector: String;
    editor: JSValue {Boolean or String or TJSObject or TField or TFieldConfig};
    enableCellContextMenu: Boolean;
    enableHeaderContextMenu: Boolean;
    exportable: Boolean;
    exportedType: String;
    field: String;
    filterType: String;
    filterable: JSValue {Boolean or TFunction or TJSObject};
    finalizeCellEdit: TFunction;
    fitMode: String;
    flex: Double;
    groupRenderer: TFunction;
    groupable: Boolean;
    headerMenuItems: TJSObject;
    headerRenderer: TFunction;
    hidden: Boolean;
    hideable: Boolean;
    htmlEncode: Boolean;
    htmlEncodeHeaderText: Boolean;
    icon: String;
    id: JSValue {String or Double};
    instantUpdate: Boolean;
    invalidAction: String;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    locked: Boolean;
    minWidth: JSValue {Double or String};
    parentId: JSValue {String or Double or };
    parentIndex: Double;
    region: String;
    renderer: TFunction;
    resizable: Boolean;
    responsiveLevels: TJSObject;
    revertOnEscape: Boolean;
    searchable: Boolean;
    showColumnPicker: Boolean;
    sortable: JSValue {Boolean or TFunction or TJSObject};
    sum: String;
    summaries: array of TJSObject;
    summaryRenderer: TFunction;
    tags: array of String;
    text: String;
    tooltip: String;
    tooltipRenderer: TFunction;
    touchConfig: TJSObject;
    tree: Boolean;
    width: JSValue {Double or String};
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
  end;

  TActionColumnConfig = class external name 'Object' (TColumnConfig)
    actions: array of TJSObject;
    disableIfGridReadOnly: Boolean;
  end;

  TAggregateColumnConfig = class external name 'Object' (TColumnConfig)
    &function: JSValue {TFunction or String};
  end;

  TCheckColumnConfig = class external name 'Object' (TColumnConfig)
    checkCls: String;
    showCheckAll: Boolean;
    widgets: array of TJSObject;
    onBeforeToggle: TFunction;
    onToggle: TFunction;
    onToggleAll: TFunction;
  end;

  TDateColumnConfig = class external name 'Object' (TColumnConfig)
    format: String;
    step: JSValue {String or Double or TJSObject};
  end;

  TNumberColumnConfig = class external name 'Object' (TColumnConfig)
    format: JSValue {String or TJSObject or TNumberFormat or TNumberFormatConfig};
    largeStep: Double;
    max: Double;
    min: Double;
    step: Double;
    &unit: String;
  end;

  TPercentColumnConfig = class external name 'Object' (TColumnConfig)
    lowThreshold: Double;
    showValue: Boolean;
  end;

  TRatingColumnConfig = class external name 'Object' (TColumnConfig)
    editable: Boolean;
    emptyIcon: String;
    filledIcon: String;
    format: JSValue {String or TJSObject or TNumberFormat or TNumberFormatConfig};
    largeStep: Double;
    max: Double;
    min: Double;
    step: Double;
    &unit: String;
  end;

  TRowNumberColumnConfig = class external name 'Object' (TColumnConfig)
  end;

  TTemplateColumnConfig = class external name 'Object' (TColumnConfig)
    template: TFunction;
  end;

  TTimeColumnConfig = class external name 'Object' (TColumnConfig)
    format: String;
  end;

  TTreeColumnConfig = class external name 'Object' (TColumnConfig)
    collapseIconCls: String;
    collapsedFolderIconCls: String;
    expandIconCls: String;
    expandedFolderIconCls: String;
    indentSize: Double;
    leafIconCls: String;
  end;

  TWidgetColumnConfig = class external name 'Object' (TColumnConfig)
    widgets: array of TJSObject;
  end;

  TGridTagConfig = class external name 'Object' (TJSObject)
    faPath: String;
    stylesheet: String;
  end;

  TColumnStoreConfig = class external name 'Object' (TJSObject)
    allowNoId: Boolean;
    autoAddField: Boolean;
    autoCommit: Boolean;
    autoTree: Boolean;
    bubbleEvents: TJSObject;
    chainedFields: array of String;
    chainedFilterFn: TFunction;
    data: JSValue {array of TJSObject or array of TModel or array of TModelConfig};
    doRelayToMaster: array of String;
    dontRelayToMaster: String;
    fields: JSValue {array of String or array of TJSObject or array of TDataField or array of TDataFieldConfig};
    filters: JSValue {TJSObject or array of TJSObject};
    groupers: array of TJSObject;
    id: JSValue {String or Double};
    keepUncommittedChanges: Boolean;
    listeners: TJSObject;
    masterStore: TBryntum.TStore;
    modelClass: TBryntum.TModelClass;
    reapplyFilterOnAdd: Boolean;
    reapplyFilterOnUpdate: Boolean;
    reapplySortersOnAdd: Boolean;
    sorters: JSValue {array of TJSObject or array of String};
    stm: TBryntum.TStateTrackingManager;
    storage: JSValue {TCollection or TJSObject or TCollectionConfig};
    syncDataOnLoad: JSValue {Boolean or TJSObject};
    transformFlatData: Boolean;
    tree: Boolean;
    useLocaleSort: JSValue {Boolean or String or TJSObject};
    useRawData: JSValue {Boolean or TJSObject};
    onColumnHide: TFunction;
    onColumnShow: TFunction;
  end;

  TGridRowModelConfig = class external name 'Object' (TJSObject)
    children: JSValue {Boolean or array of TJSObject or array of TModel or array of TModelConfig};
    cls: String;
    expanded: Boolean;
    href: String;
    iconCls: String;
    id: JSValue {String or Double};
    parentId: JSValue {String or Double or };
    parentIndex: Double;
    rowHeight: Double;
    target: String;
  end;

  TCellEditConfig = class external name 'Object' (TJSObject)
    addNewAtEnd: JSValue {Boolean or TJSObject};
    autoEdit: Boolean;
    autoSelect: Boolean;
    blurAction: String;
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    triggerEvent: String;
    onBeforeCellEditStart: TFunction;
    onBeforeFinishCellEdit: TFunction;
    onCancelCellEdit: TFunction;
    onFinishCellEdit: TFunction;
    onStartCellEdit: TFunction;
  end;

  TCellMenuConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    items: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    menu: TJSObject;
    menuConfig: TJSObject;
    processItems: TFunction;
    triggerEvent: String;
    &type: String;
    onCellMenuBeforeShow: TFunction;
    onCellMenuItem: TFunction;
    onCellMenuShow: TFunction;
    onCellMenuToggleItem: TFunction;
  end;

  TCellTooltipConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    tooltipRenderer: TFunction;
  end;

  TColumnAutoWidthConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    &default: JSValue {Double or array of Double};
    delay: Double;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TColumnDragToolbarConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TColumnPickerConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    createColumnsFromModel: Boolean;
    disabled: Boolean;
    groupByRegion: Boolean;
    groupByTag: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TColumnReorderConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TColumnResizeConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    liveResize: JSValue {String or Boolean};
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TContextMenuConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    cellItems: array of TJSObject;
    disabled: Boolean;
    headerItems: array of TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    processCellItems: TFunction;
    processHeaderItems: TFunction;
    triggerEvent: String;
    onCellContextMenuBeforeShow: TFunction;
    onCellContextMenuShow: TFunction;
    onContextMenuItem: TFunction;
    onContextMenuToggleItem: TFunction;
    onHeaderContextMenuBeforeShow: TFunction;
    onHeaderContextMenuShow: TFunction;
  end;

  TFilterConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    prioritizeColumns: Boolean;
  end;

  TFilterBarConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    compactMode: Boolean;
    disabled: Boolean;
    keyStrokeFilterDelay: Double;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    prioritizeColumns: Boolean;
  end;

  TGroupConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    field: String;
    groupSortFn: TFunction;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    renderer: TFunction;
    onToggleGroup: TFunction;
  end;

  TGroupSummaryConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    collapseToHeader: Boolean;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  THeaderMenuConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    items: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    menu: TJSObject;
    menuConfig: TJSObject;
    processItems: TFunction;
    triggerEvent: String;
    &type: String;
    onHeaderMenuBeforeShow: TFunction;
    onHeaderMenuItem: TFunction;
    onHeaderMenuShow: TFunction;
    onHeaderMenuToggleItem: TFunction;
  end;

  TQuickFindConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TRegionResizeConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TRowCopyPasteConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TRowReorderConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    hoverExpandTimeout: Double;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    onGridRowAbort: TFunction;
    onGridRowBeforeDragStart: TFunction;
    onGridRowBeforeDropFinalize: TFunction;
    onGridRowDrag: TFunction;
    onGridRowDragStart: TFunction;
    onGridRowDrop: TFunction;
  end;

  TSearchConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TSortConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    multiSort: Boolean;
    prioritizeColumns: Boolean;
  end;

  TStickyCellsConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    contentSelector: String;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TStripeConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TSummaryConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    selectedOnly: Boolean;
  end;

  TTreeConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    disabled: Boolean;
    expandOnCellClick: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
  end;

  TExcelExporterConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    convertEmptyValueToEmptyString: Boolean;
    dateFormat: String;
    disabled: Boolean;
    exporterClass: TBryntum.TTableExporter;
    exporterConfig: TJSObject;
    filename: String;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    zipcelx: TJSObject;
  end;

  TPdfExportConfig = class external name 'Object' (TJSObject)
    alignRows: Boolean;
    bubbleEvents: TJSObject;
    clientURL: String;
    disabled: Boolean;
    exportMask: String;
    exportProgressMask: String;
    exportServer: String;
    exporterType: String;
    exporters: array of TBryntum.TExporter;
    fetchOptions: TJSObject;
    fileFormat: String;
    fileName: String;
    footerTpl: TFunction;
    headerTpl: TFunction;
    keepPathName: Boolean;
    keepRegionSizes: TJSObject;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    openAfterExport: Boolean;
    openInNewTab: Boolean;
    orientation: String;
    paperFormat: String;
    repeatHeader: Boolean;
    rowsRange: String;
    sendAsBinary: Boolean;
    translateURLsToAbsolute: JSValue {Boolean or String};
    onBeforeExport: TFunction;
    onExport: TFunction;
    onExportStep: TFunction;
  end;

  TExporterConfig = class external name 'Object' (TJSObject)
    bubbleEvents: TJSObject;
    keepPathName: Boolean;
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    translateURLsToAbsolute: JSValue {Boolean or String};
    onBeforeDestroy: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
  end;

  TRowConfig = class external name 'Object' (TJSObject)
    cls: JSValue {String or TDomClassList or TJSObject};
  end;

  TTableExporterConfig = class external name 'Object' (TJSObject)
    columns: JSValue {array of String or array of TJSObject};
    defaultColumnWidth: Double;
    exportDateAsInstance: Boolean;
    indent: Boolean;
    indentationSymbol: String;
    showGroupHeader: Boolean;
    target: TBryntum.TGrid;
  end;

  TGridFeatures = class external name 'Object' (TJSObject)
    cellEdit: Boolean;
    cellMenu: TCellMenuConfig;
    cellTooltip: TCellTooltipConfig;
    columnAutoWidth: TColumnAutoWidthConfig;
    columnDragToolbar: TColumnDragToolbarConfig;
    columnPicker: TColumnPickerConfig;
    columnReorder: TColumnReorderConfig;
    columnResize: TColumnResizeConfig;
    filter: Boolean;
    filterConfig: TFilterConfig external name 'filter';
    filterBar: TFilterBarConfig;
    group: TGroupConfig;
    groupSummary: TGroupSummaryConfig;
    headerMenu: THeaderMenuConfig;
    quickFind: TQuickFindConfig;
    regionResize: TRegionResizeConfig;
    rowCopyPaste: TRowCopyPasteConfig;
    rowReorder: TRowReorderConfig;
    search: TSearchConfig;
    sort: TSortConfig;
    stickyCells: TStickyCellsConfig;
    stripe: Boolean;
    stripeConfig: TStripeConfig external name 'stripe';
    summary: TSummaryConfig;
    tree: TTreeConfig;
  end;

  TGridBaseConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    animateRemovingRows: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoHeight: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    columnLines: Boolean;
    columns: TArray<TColumnConfig> {array of TJSObject or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    contextMenuTriggerEvent: String;
    data: array of TJSObject;
    dataset: TJSObject;
    defaultBindProperty: String;
    defaultRegion: String;
    defaults: TJSObject;
    destroyStore: Boolean;
    disableGridRowModelWarning: Boolean;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    emptyText: String;
    enableSticky: Boolean;
    enableTextSelection: Boolean;
    enableUndoRedoKeys: Boolean;
    features: TGridFeatures;
    fillLastColumn: Boolean;
    fixedRowHeight: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    footer: JSValue {TJSObject or String};
    fullRowRefresh: Boolean;
    getRowHeight: TFunction;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideHeaders: Boolean;
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    loadMask: JSValue {String or TJSObject or };
    loadMaskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    loadMaskError: JSValue {TJSObject or TMask or TMaskConfig};
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    longPressTime: Double;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    plugins: array of TFunction;
    positioned: Boolean;
    preserveFocusOnDatasetChange: Boolean;
    preserveScrollOnDatasetChange: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    resizeToFitIncludesHeader: Boolean;
    responsiveLevels: TJSObject;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    rowHeight: Double;
    scrollAction: String;
    scrollManager: JSValue {TJSObject or TBryntum.TScrollManager or TScrollManagerConfig};
    scrollable: JSValue {Boolean or TJSObject or TScroller or TScrollerConfig};
    scrollerClass: TBryntum.TScroller;
    selectionMode: TJSObject;
    showAnimation: JSValue {Boolean or TJSObject};
    showDirty: Boolean;
    showRemoveRowInContextMenu: Boolean;
    store: JSValue {TBryntum.TStore or TJSObject or TStoreConfig};
    strips: TJSObject;
    style: String;
    subGridConfigs: TJSObject;
    syncMask: JSValue {String or TJSObject or };
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    transitionDuration: Double;
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onBeforeRenderRows: TFunction;
    onBeforeToggleNode: TFunction;
    onCellClick: TFunction;
    onCellContextMenu: TFunction;
    onCellDblClick: TFunction;
    onCellMouseOut: TFunction;
    onCellMouseOver: TFunction;
    onCollapseNode: TFunction;
    onExpandNode: TFunction;
    onMouseOut: TFunction;
    onMouseOver: TFunction;
    onRenderRows: TFunction;
    onResponsive: TFunction;
    onScroll: TFunction;
    onSelectionChange: TFunction;
    onToggleNode: TFunction;
  end;

  TGridConfig = class external name 'Object' (TGridBaseConfig)
    onBeforeCellEditStart: TFunction;
    onBeforeDestroy: TFunction;
    onBeforeFinishCellEdit: TFunction;
    onCancelCellEdit: TFunction;
    onCatchAll: TFunction;
    onDestroy: TFunction;
    onFinishCellEdit: TFunction;
    onStartCellEdit: TFunction;
  end;

  TSubGridConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    collapsed: Boolean;
    columns: TBryntum.TColumnStore;
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    region: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TBryntum.TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    textAlign: String;
    title: String;
    tooltip: JSValue {String or TJSObject};
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TTreeGridConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    animateRemovingRows: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoHeight: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    cls: JSValue {String or TJSObject};
    columnLines: Boolean;
    columns: JSValue {array of TJSObject or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    contextMenuTriggerEvent: String;
    data: array of TJSObject;
    dataset: TJSObject;
    defaultBindProperty: String;
    defaultRegion: String;
    defaults: TJSObject;
    destroyStore: Boolean;
    disableGridRowModelWarning: Boolean;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    emptyText: String;
    enableSticky: Boolean;
    enableTextSelection: Boolean;
    enableUndoRedoKeys: Boolean;
    features: TJSObject;
    fillLastColumn: Boolean;
    fixedRowHeight: Boolean;
    flex: JSValue {Double or String};
    floating: Boolean;
    footer: JSValue {TJSObject or String};
    fullRowRefresh: Boolean;
    getRowHeight: TFunction;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hideHeaders: Boolean;
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    loadMask: JSValue {String or TJSObject or };
    loadMaskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    loadMaskError: JSValue {TJSObject or TMask or TMaskConfig};
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    longPressTime: Double;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    plugins: array of TFunction;
    positioned: Boolean;
    preserveFocusOnDatasetChange: Boolean;
    preserveScrollOnDatasetChange: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    resizeToFitIncludesHeader: Boolean;
    responsiveLevels: TJSObject;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    rowHeight: Double;
    scrollAction: String;
    scrollManager: JSValue {TJSObject or TBryntum.TScrollManager or TScrollManagerConfig};
    scrollable: JSValue {Boolean or TJSObject or TBryntum.TScroller or TScrollerConfig};
    scrollerClass: TBryntum.TScroller;
    selectionMode: TJSObject;
    showAnimation: JSValue {Boolean or TJSObject};
    showDirty: Boolean;
    showRemoveRowInContextMenu: Boolean;
    store: JSValue {TBryntum.TStore or TJSObject or TStoreConfig};
    strips: TJSObject;
    style: String;
    subGridConfigs: TJSObject;
    syncMask: JSValue {String or TJSObject or };
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    transitionDuration: Double;
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
  end;

  TExportDialogConfig = class external name 'Object' (TJSObject)
    adopt: JSValue {THTMLElement or String};
    align: JSValue {TJSObject or String};
    alignSelf: String;
    anchor: Boolean;
    appendTo: JSValue {THTMLElement or String};
    autoClose: Boolean;
    autoShow: Boolean;
    bbar: JSValue {array of TJSObject or TJSObject};
    bodyCls: JSValue {String or TJSObject};
    bubbleEvents: TJSObject;
    centered: Boolean;
    client: TBryntum.TGrid;
    closable: Boolean;
    closeAction: String;
    cls: JSValue {String or TJSObject};
    constrainTo: JSValue {THTMLElement or TBryntum.TWidget or TRectangle};
    content: String;
    contentElementCls: JSValue {String or TJSObject};
    dataset: TJSObject;
    defaultBindProperty: String;
    defaults: TJSObject;
    disabled: Boolean;
    dock: String;
    draggable: JSValue {Boolean or TJSObject};
    flex: JSValue {Double or String};
    floating: Boolean;
    focusOnToFront: Boolean;
    footer: JSValue {TJSObject or String};
    forElement: THTMLElement;
    header: JSValue {String or TPanelHeader};
    height: JSValue {String or Double};
    hidden: Boolean;
    hideAnimation: JSValue {Boolean or TJSObject};
    hidePNGMultipageOption: Boolean;
    hideWhenEmpty: Boolean;
    html: String;
    htmlCls: JSValue {String or TJSObject};
    id: String;
    insertBefore: JSValue {THTMLElement or String};
    insertFirst: JSValue {THTMLElement or String};
    itemCls: String;
    items: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    layout: String;
    layoutStyle: TJSObject;
    lazyItems: JSValue {TJSObject or array of TJSObject or array of TBryntum.TWidget or TWidgetConfig or array of TWidgetConfig};
    listeners: TJSObject;
    localeClass: TBryntum.TBase;
    localizableProperties: array of String;
    margin: JSValue {Double or String};
    maskDefaults: JSValue {TJSObject or TMask or TMaskConfig};
    masked: JSValue {Boolean or String or TJSObject or TMask or TMaskConfig};
    maxHeight: JSValue {String or Double};
    maxWidth: JSValue {String or Double};
    maximizable: Boolean;
    maximized: Boolean;
    minHeight: JSValue {String or Double};
    minWidth: JSValue {String or Double};
    modal: Boolean;
    monitorResize: Boolean;
    namedItems: TJSObject;
    owner: TBryntum.TWidget;
    positioned: Boolean;
    preventTooltipOnTouch: Boolean;
    readOnly: Boolean;
    ref: String;
    ripple: JSValue {Boolean or TJSObject};
    rootElement: TShadowRoot;
    scrollAction: String;
    scrollable: JSValue {Boolean or TJSObject or TBryntum.TScroller or TScrollerConfig};
    showAnimation: JSValue {Boolean or TJSObject};
    showOnClick: Boolean;
    strips: TJSObject;
    style: String;
    tab: JSValue {Boolean or TJSObject};
    tag: String;
    tbar: JSValue {array of TJSObject or TJSObject};
    textAlign: String;
    textContent: Boolean;
    title: String;
    tools: TJSObject;
    tooltip: JSValue {String or TJSObject};
    trapFocus: Boolean;
    weight: Double;
    width: JSValue {String or Double};
    x: Double;
    y: Double;
    onCancel: TFunction;
    onExport: TFunction;
  end;

  TGridElementEventsConfig = class external name 'Object' (TJSObject)
    enableUndoRedoKeys: Boolean;
    longPressTime: Double;
    onCellClick: TFunction;
    onCellContextMenu: TFunction;
    onCellDblClick: TFunction;
    onCellMouseOut: TFunction;
    onCellMouseOver: TFunction;
    onMouseOut: TFunction;
    onMouseOver: TFunction;
  end;

  TGridFeaturesConfig = class external name 'Object' (TJSObject)
    features: TGridFeatures;
  end;

  TGridResponsiveConfig = class external name 'Object' (TJSObject)
    responsiveLevels: TJSObject;
    onResponsive: TFunction;
  end;

  TGridSelectionConfig = class external name 'Object' (TJSObject)
    selectionMode: TJSObject;
    onSelectionChange: TFunction;
  end;


// Logo antes do implementation

function GlobalEvents: TBryntum.TGlobalEventsSingleton external name 'GlobalEvents';
function LocaleManager: TBryntum.TLocaleManagerSingleton external name 'LocaleManager';
function MessageDialog: TBryntum.TMessageDialogSingleton external name 'MessageDialog';

implementation

end.
